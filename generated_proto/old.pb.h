// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: old.proto

#ifndef PROTOBUF_old_2eproto__INCLUDED
#define PROTOBUF_old_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)

namespace avoldtcpproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_old_2eproto();
void protobuf_AssignDesc_old_2eproto();
void protobuf_ShutdownFile_old_2eproto();

class avTCPPacket;

// ===================================================================

class avTCPPacket : public ::google::protobuf::Message {
 public:
  avTCPPacket();
  virtual ~avTCPPacket();

  avTCPPacket(const avTCPPacket& from);

  inline avTCPPacket& operator=(const avTCPPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const avTCPPacket& default_instance();

  void Swap(avTCPPacket* other);

  // implements Message ----------------------------------------------

  avTCPPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const avTCPPacket& from);
  void MergeFrom(const avTCPPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .proto.avPacket avpacket = 2;
  inline bool has_avpacket() const;
  inline void clear_avpacket();
  static const int kAvpacketFieldNumber = 2;
  inline const ::proto::avPacket& avpacket() const;
  inline ::proto::avPacket* mutable_avpacket();
  inline ::proto::avPacket* release_avpacket();
  inline void set_allocated_avpacket(::proto::avPacket* avpacket);

  // optional .proto.avAddress endpoint_address = 3;
  inline bool has_endpoint_address() const;
  inline void clear_endpoint_address();
  static const int kEndpointAddressFieldNumber = 3;
  inline const ::proto::avAddress& endpoint_address() const;
  inline ::proto::avAddress* mutable_endpoint_address();
  inline ::proto::avAddress* release_endpoint_address();
  inline void set_allocated_endpoint_address(::proto::avAddress* endpoint_address);

  // optional bytes endpoint_cert = 4;
  inline bool has_endpoint_cert() const;
  inline void clear_endpoint_cert();
  static const int kEndpointCertFieldNumber = 4;
  inline const ::std::string& endpoint_cert() const;
  inline void set_endpoint_cert(const ::std::string& value);
  inline void set_endpoint_cert(const char* value);
  inline void set_endpoint_cert(const void* value, size_t size);
  inline ::std::string* mutable_endpoint_cert();
  inline ::std::string* release_endpoint_cert();
  inline void set_allocated_endpoint_cert(::std::string* endpoint_cert);

  // @@protoc_insertion_point(class_scope:avoldtcpproto.avTCPPacket)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_avpacket();
  inline void clear_has_avpacket();
  inline void set_has_endpoint_address();
  inline void clear_has_endpoint_address();
  inline void set_has_endpoint_cert();
  inline void clear_has_endpoint_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::avPacket* avpacket_;
  ::proto::avAddress* endpoint_address_;
  ::std::string* endpoint_cert_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_old_2eproto();
  friend void protobuf_AssignDesc_old_2eproto();
  friend void protobuf_ShutdownFile_old_2eproto();

  void InitAsDefaultInstance();
  static avTCPPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// avTCPPacket

// required uint32 type = 1;
inline bool avTCPPacket::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void avTCPPacket::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void avTCPPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void avTCPPacket::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 avTCPPacket::type() const {
  // @@protoc_insertion_point(field_get:avoldtcpproto.avTCPPacket.type)
  return type_;
}
inline void avTCPPacket::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:avoldtcpproto.avTCPPacket.type)
}

// optional .proto.avPacket avpacket = 2;
inline bool avTCPPacket::has_avpacket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void avTCPPacket::set_has_avpacket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void avTCPPacket::clear_has_avpacket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void avTCPPacket::clear_avpacket() {
  if (avpacket_ != NULL) avpacket_->::proto::avPacket::Clear();
  clear_has_avpacket();
}
inline const ::proto::avPacket& avTCPPacket::avpacket() const {
  // @@protoc_insertion_point(field_get:avoldtcpproto.avTCPPacket.avpacket)
  return avpacket_ != NULL ? *avpacket_ : *default_instance_->avpacket_;
}
inline ::proto::avPacket* avTCPPacket::mutable_avpacket() {
  set_has_avpacket();
  if (avpacket_ == NULL) avpacket_ = new ::proto::avPacket;
  // @@protoc_insertion_point(field_mutable:avoldtcpproto.avTCPPacket.avpacket)
  return avpacket_;
}
inline ::proto::avPacket* avTCPPacket::release_avpacket() {
  clear_has_avpacket();
  ::proto::avPacket* temp = avpacket_;
  avpacket_ = NULL;
  return temp;
}
inline void avTCPPacket::set_allocated_avpacket(::proto::avPacket* avpacket) {
  delete avpacket_;
  avpacket_ = avpacket;
  if (avpacket) {
    set_has_avpacket();
  } else {
    clear_has_avpacket();
  }
  // @@protoc_insertion_point(field_set_allocated:avoldtcpproto.avTCPPacket.avpacket)
}

// optional .proto.avAddress endpoint_address = 3;
inline bool avTCPPacket::has_endpoint_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void avTCPPacket::set_has_endpoint_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void avTCPPacket::clear_has_endpoint_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void avTCPPacket::clear_endpoint_address() {
  if (endpoint_address_ != NULL) endpoint_address_->::proto::avAddress::Clear();
  clear_has_endpoint_address();
}
inline const ::proto::avAddress& avTCPPacket::endpoint_address() const {
  // @@protoc_insertion_point(field_get:avoldtcpproto.avTCPPacket.endpoint_address)
  return endpoint_address_ != NULL ? *endpoint_address_ : *default_instance_->endpoint_address_;
}
inline ::proto::avAddress* avTCPPacket::mutable_endpoint_address() {
  set_has_endpoint_address();
  if (endpoint_address_ == NULL) endpoint_address_ = new ::proto::avAddress;
  // @@protoc_insertion_point(field_mutable:avoldtcpproto.avTCPPacket.endpoint_address)
  return endpoint_address_;
}
inline ::proto::avAddress* avTCPPacket::release_endpoint_address() {
  clear_has_endpoint_address();
  ::proto::avAddress* temp = endpoint_address_;
  endpoint_address_ = NULL;
  return temp;
}
inline void avTCPPacket::set_allocated_endpoint_address(::proto::avAddress* endpoint_address) {
  delete endpoint_address_;
  endpoint_address_ = endpoint_address;
  if (endpoint_address) {
    set_has_endpoint_address();
  } else {
    clear_has_endpoint_address();
  }
  // @@protoc_insertion_point(field_set_allocated:avoldtcpproto.avTCPPacket.endpoint_address)
}

// optional bytes endpoint_cert = 4;
inline bool avTCPPacket::has_endpoint_cert() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void avTCPPacket::set_has_endpoint_cert() {
  _has_bits_[0] |= 0x00000008u;
}
inline void avTCPPacket::clear_has_endpoint_cert() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void avTCPPacket::clear_endpoint_cert() {
  if (endpoint_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_cert_->clear();
  }
  clear_has_endpoint_cert();
}
inline const ::std::string& avTCPPacket::endpoint_cert() const {
  // @@protoc_insertion_point(field_get:avoldtcpproto.avTCPPacket.endpoint_cert)
  return *endpoint_cert_;
}
inline void avTCPPacket::set_endpoint_cert(const ::std::string& value) {
  set_has_endpoint_cert();
  if (endpoint_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_cert_ = new ::std::string;
  }
  endpoint_cert_->assign(value);
  // @@protoc_insertion_point(field_set:avoldtcpproto.avTCPPacket.endpoint_cert)
}
inline void avTCPPacket::set_endpoint_cert(const char* value) {
  set_has_endpoint_cert();
  if (endpoint_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_cert_ = new ::std::string;
  }
  endpoint_cert_->assign(value);
  // @@protoc_insertion_point(field_set_char:avoldtcpproto.avTCPPacket.endpoint_cert)
}
inline void avTCPPacket::set_endpoint_cert(const void* value, size_t size) {
  set_has_endpoint_cert();
  if (endpoint_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_cert_ = new ::std::string;
  }
  endpoint_cert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:avoldtcpproto.avTCPPacket.endpoint_cert)
}
inline ::std::string* avTCPPacket::mutable_endpoint_cert() {
  set_has_endpoint_cert();
  if (endpoint_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_cert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:avoldtcpproto.avTCPPacket.endpoint_cert)
  return endpoint_cert_;
}
inline ::std::string* avTCPPacket::release_endpoint_cert() {
  clear_has_endpoint_cert();
  if (endpoint_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endpoint_cert_;
    endpoint_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void avTCPPacket::set_allocated_endpoint_cert(::std::string* endpoint_cert) {
  if (endpoint_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_cert_;
  }
  if (endpoint_cert) {
    set_has_endpoint_cert();
    endpoint_cert_ = endpoint_cert;
  } else {
    clear_has_endpoint_cert();
    endpoint_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:avoldtcpproto.avTCPPacket.endpoint_cert)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace avoldtcpproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_old_2eproto__INCLUDED
