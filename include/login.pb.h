// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class login;

// ===================================================================

class login : public ::google::protobuf::Message {
 public:
  login();
  virtual ~login();

  login(const login& from);

  inline login& operator=(const login& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline login& operator=(login&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  login(login&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login& default_instance();

  void Swap(login* other);

  // implements Message ----------------------------------------------

  login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login& from);
  void MergeFrom(const login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string other_info = 2;
  inline bool has_other_info() const;
  inline void clear_other_info();
  static const int kOtherInfoFieldNumber = 2;
  inline const ::std::string& other_info() const;
  inline void set_other_info(const ::std::string& value);
  inline void set_other_info(const char* value);
  inline void set_other_info(const char* value, size_t size);
  inline ::std::string* mutable_other_info();
  inline ::std::string* release_other_info();
  inline void set_allocated_other_info(::std::string* other_info);

  // @@protoc_insertion_point(class_scope:login)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_other_info();
  inline void clear_has_other_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* other_info_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static login* default_instance_;
};
// ===================================================================


// ===================================================================

// login

// required string user_name = 1;
inline bool login::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& login::user_name() const {
  // @@protoc_insertion_point(field_get:login.user_name)
  return *user_name_;
}
inline void login::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:login.user_name)
}
inline void login::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:login.user_name)
}
inline void login::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:login.user_name)
}
inline ::std::string* login::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:login.user_name)
  return user_name_;
}
inline ::std::string* login::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:login.user_name)
}

// optional string other_info = 2;
inline bool login::has_other_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login::set_has_other_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login::clear_has_other_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login::clear_other_info() {
  if (other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_info_->clear();
  }
  clear_has_other_info();
}
inline const ::std::string& login::other_info() const {
  // @@protoc_insertion_point(field_get:login.other_info)
  return *other_info_;
}
inline void login::set_other_info(const ::std::string& value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
  // @@protoc_insertion_point(field_set:login.other_info)
}
inline void login::set_other_info(const char* value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:login.other_info)
}
inline void login::set_other_info(const char* value, size_t size) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:login.other_info)
}
inline ::std::string* login::mutable_other_info() {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    other_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:login.other_info)
  return other_info_;
}
inline ::std::string* login::release_other_info() {
  clear_has_other_info();
  if (other_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = other_info_;
    other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login::set_allocated_other_info(::std::string* other_info) {
  if (other_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete other_info_;
  }
  if (other_info) {
    set_has_other_info();
    other_info_ = other_info;
  } else {
    clear_has_other_info();
    other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:login.other_info)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
