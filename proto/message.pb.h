// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "address.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class avpacket;
class avpacket_ack_control;
class agmp;
class agmp_PKREPLY;
class agmp_NOROUTTOHOST;
class agmp_TTLOUT;

// ===================================================================

class avpacket_ack_control : public ::google::protobuf::Message {
 public:
  avpacket_ack_control();
  virtual ~avpacket_ack_control();

  avpacket_ack_control(const avpacket_ack_control& from);

  inline avpacket_ack_control& operator=(const avpacket_ack_control& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline avpacket_ack_control& operator=(avpacket_ack_control&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  avpacket_ack_control(avpacket_ack_control&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const avpacket_ack_control& default_instance();

  void Swap(avpacket_ack_control* other);

  // implements Message ----------------------------------------------

  avpacket_ack_control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const avpacket_ack_control& from);
  void MergeFrom(const avpacket_ack_control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ack_seq = 1;
  inline bool has_ack_seq() const;
  inline void clear_ack_seq();
  static const int kAckSeqFieldNumber = 1;
  inline ::google::protobuf::uint64 ack_seq() const;
  inline void set_ack_seq(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.avpacket.ack_control)
 private:
  inline void set_has_ack_seq();
  inline void clear_has_ack_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ack_seq_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static avpacket_ack_control* default_instance_;
};
// -------------------------------------------------------------------

class avpacket : public ::google::protobuf::Message {
 public:
  avpacket();
  virtual ~avpacket();

  avpacket(const avpacket& from);

  inline avpacket& operator=(const avpacket& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline avpacket& operator=(avpacket&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  avpacket(avpacket&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const avpacket& default_instance();

  void Swap(avpacket* other);

  // implements Message ----------------------------------------------

  avpacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const avpacket& from);
  void MergeFrom(const avpacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef avpacket_ack_control ack_control;

  // accessors -------------------------------------------------------

  // required .proto.av_address src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::proto::av_address& src() const;
  inline ::proto::av_address* mutable_src();
  inline ::proto::av_address* release_src();
  inline void set_allocated_src(::proto::av_address* src);

  // required .proto.av_address dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline const ::proto::av_address& dest() const;
  inline ::proto::av_address* mutable_dest();
  inline ::proto::av_address* release_dest();
  inline void set_allocated_dest(::proto::av_address* dest);

  // optional bytes publickey = 3;
  inline bool has_publickey() const;
  inline void clear_publickey();
  static const int kPublickeyFieldNumber = 3;
  inline const ::std::string& publickey() const;
  inline void set_publickey(const ::std::string& value);
  inline void set_publickey(const char* value);
  inline void set_publickey(const void* value, size_t size);
  inline ::std::string* mutable_publickey();
  inline ::std::string* release_publickey();
  inline void set_allocated_publickey(::std::string* publickey);

  // required uint32 time_to_live = 4 [default = 64];
  inline bool has_time_to_live() const;
  inline void clear_time_to_live();
  static const int kTimeToLiveFieldNumber = 4;
  inline ::google::protobuf::uint32 time_to_live() const;
  inline void set_time_to_live(::google::protobuf::uint32 value);

  // required string upperlayerpotocol = 6 [default = "avim"];
  inline bool has_upperlayerpotocol() const;
  inline void clear_upperlayerpotocol();
  static const int kUpperlayerpotocolFieldNumber = 6;
  inline const ::std::string& upperlayerpotocol() const;
  inline void set_upperlayerpotocol(const ::std::string& value);
  inline void set_upperlayerpotocol(const char* value);
  inline void set_upperlayerpotocol(const char* value, size_t size);
  inline ::std::string* mutable_upperlayerpotocol();
  inline ::std::string* release_upperlayerpotocol();
  inline void set_allocated_upperlayerpotocol(::std::string* upperlayerpotocol);

  // optional uint32 encrype_method = 7 [default = 0];
  inline bool has_encrype_method() const;
  inline void clear_encrype_method();
  static const int kEncrypeMethodFieldNumber = 7;
  inline ::google::protobuf::uint32 encrype_method() const;
  inline void set_encrype_method(::google::protobuf::uint32 value);

  // optional bool msg_dont_route = 9;
  inline bool has_msg_dont_route() const;
  inline void clear_msg_dont_route();
  static const int kMsgDontRouteFieldNumber = 9;
  inline bool msg_dont_route() const;
  inline void set_msg_dont_route(bool value);

  // optional uint64 timestamp = 10;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // optional .proto.avpacket.ack_control need_seq = 11;
  inline bool has_need_seq() const;
  inline void clear_need_seq();
  static const int kNeedSeqFieldNumber = 11;
  inline const ::proto::avpacket_ack_control& need_seq() const;
  inline ::proto::avpacket_ack_control* mutable_need_seq();
  inline ::proto::avpacket_ack_control* release_need_seq();
  inline void set_allocated_need_seq(::proto::avpacket_ack_control* need_seq);

  // optional bytes payload = 8;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 8;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:proto.avpacket)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_publickey();
  inline void clear_has_publickey();
  inline void set_has_time_to_live();
  inline void clear_has_time_to_live();
  inline void set_has_upperlayerpotocol();
  inline void clear_has_upperlayerpotocol();
  inline void set_has_encrype_method();
  inline void clear_has_encrype_method();
  inline void set_has_msg_dont_route();
  inline void clear_has_msg_dont_route();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_need_seq();
  inline void clear_has_need_seq();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::av_address* src_;
  ::proto::av_address* dest_;
  ::std::string* publickey_;
  static ::std::string* _default_upperlayerpotocol_;
  ::std::string* upperlayerpotocol_;
  ::google::protobuf::uint32 time_to_live_;
  ::google::protobuf::uint32 encrype_method_;
  ::google::protobuf::uint64 timestamp_;
  ::proto::avpacket_ack_control* need_seq_;
  ::std::string* payload_;
  bool msg_dont_route_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static avpacket* default_instance_;
};
// -------------------------------------------------------------------

class agmp_PKREPLY : public ::google::protobuf::Message {
 public:
  agmp_PKREPLY();
  virtual ~agmp_PKREPLY();

  agmp_PKREPLY(const agmp_PKREPLY& from);

  inline agmp_PKREPLY& operator=(const agmp_PKREPLY& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline agmp_PKREPLY& operator=(agmp_PKREPLY&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  agmp_PKREPLY(agmp_PKREPLY&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agmp_PKREPLY& default_instance();

  void Swap(agmp_PKREPLY* other);

  // implements Message ----------------------------------------------

  agmp_PKREPLY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agmp_PKREPLY& from);
  void MergeFrom(const agmp_PKREPLY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes x509_cert = 1;
  inline bool has_x509_cert() const;
  inline void clear_x509_cert();
  static const int kX509CertFieldNumber = 1;
  inline const ::std::string& x509_cert() const;
  inline void set_x509_cert(const ::std::string& value);
  inline void set_x509_cert(const char* value);
  inline void set_x509_cert(const void* value, size_t size);
  inline ::std::string* mutable_x509_cert();
  inline ::std::string* release_x509_cert();
  inline void set_allocated_x509_cert(::std::string* x509_cert);

  // @@protoc_insertion_point(class_scope:proto.agmp.PKREPLY)
 private:
  inline void set_has_x509_cert();
  inline void clear_has_x509_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* x509_cert_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static agmp_PKREPLY* default_instance_;
};
// -------------------------------------------------------------------

class agmp_NOROUTTOHOST : public ::google::protobuf::Message {
 public:
  agmp_NOROUTTOHOST();
  virtual ~agmp_NOROUTTOHOST();

  agmp_NOROUTTOHOST(const agmp_NOROUTTOHOST& from);

  inline agmp_NOROUTTOHOST& operator=(const agmp_NOROUTTOHOST& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline agmp_NOROUTTOHOST& operator=(agmp_NOROUTTOHOST&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  agmp_NOROUTTOHOST(agmp_NOROUTTOHOST&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agmp_NOROUTTOHOST& default_instance();

  void Swap(agmp_NOROUTTOHOST* other);

  // implements Message ----------------------------------------------

  agmp_NOROUTTOHOST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agmp_NOROUTTOHOST& from);
  void MergeFrom(const agmp_NOROUTTOHOST& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.av_address host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::proto::av_address& host() const;
  inline ::proto::av_address* mutable_host();
  inline ::proto::av_address* release_host();
  inline void set_allocated_host(::proto::av_address* host);

  // @@protoc_insertion_point(class_scope:proto.agmp.NOROUTTOHOST)
 private:
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::av_address* host_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static agmp_NOROUTTOHOST* default_instance_;
};
// -------------------------------------------------------------------

class agmp_TTLOUT : public ::google::protobuf::Message {
 public:
  agmp_TTLOUT();
  virtual ~agmp_TTLOUT();

  agmp_TTLOUT(const agmp_TTLOUT& from);

  inline agmp_TTLOUT& operator=(const agmp_TTLOUT& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline agmp_TTLOUT& operator=(agmp_TTLOUT&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  agmp_TTLOUT(agmp_TTLOUT&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agmp_TTLOUT& default_instance();

  void Swap(agmp_TTLOUT* other);

  // implements Message ----------------------------------------------

  agmp_TTLOUT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agmp_TTLOUT& from);
  void MergeFrom(const agmp_TTLOUT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.av_address host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::proto::av_address& host() const;
  inline ::proto::av_address* mutable_host();
  inline ::proto::av_address* release_host();
  inline void set_allocated_host(::proto::av_address* host);

  // @@protoc_insertion_point(class_scope:proto.agmp.TTLOUT)
 private:
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::av_address* host_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static agmp_TTLOUT* default_instance_;
};
// -------------------------------------------------------------------

class agmp : public ::google::protobuf::Message {
 public:
  agmp();
  virtual ~agmp();

  agmp(const agmp& from);

  inline agmp& operator=(const agmp& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline agmp& operator=(agmp&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  agmp(agmp&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agmp& default_instance();

  void Swap(agmp* other);

  // implements Message ----------------------------------------------

  agmp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agmp& from);
  void MergeFrom(const agmp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef agmp_PKREPLY PKREPLY;
  typedef agmp_NOROUTTOHOST NOROUTTOHOST;
  typedef agmp_TTLOUT TTLOUT;

  // accessors -------------------------------------------------------

  // optional .proto.agmp.PKREPLY pkreply = 1;
  inline bool has_pkreply() const;
  inline void clear_pkreply();
  static const int kPkreplyFieldNumber = 1;
  inline const ::proto::agmp_PKREPLY& pkreply() const;
  inline ::proto::agmp_PKREPLY* mutable_pkreply();
  inline ::proto::agmp_PKREPLY* release_pkreply();
  inline void set_allocated_pkreply(::proto::agmp_PKREPLY* pkreply);

  // optional .proto.agmp.NOROUTTOHOST noroutetohost = 2;
  inline bool has_noroutetohost() const;
  inline void clear_noroutetohost();
  static const int kNoroutetohostFieldNumber = 2;
  inline const ::proto::agmp_NOROUTTOHOST& noroutetohost() const;
  inline ::proto::agmp_NOROUTTOHOST* mutable_noroutetohost();
  inline ::proto::agmp_NOROUTTOHOST* release_noroutetohost();
  inline void set_allocated_noroutetohost(::proto::agmp_NOROUTTOHOST* noroutetohost);

  // optional .proto.agmp.TTLOUT ttlout = 3;
  inline bool has_ttlout() const;
  inline void clear_ttlout();
  static const int kTtloutFieldNumber = 3;
  inline const ::proto::agmp_TTLOUT& ttlout() const;
  inline ::proto::agmp_TTLOUT* mutable_ttlout();
  inline ::proto::agmp_TTLOUT* release_ttlout();
  inline void set_allocated_ttlout(::proto::agmp_TTLOUT* ttlout);

  // @@protoc_insertion_point(class_scope:proto.agmp)
 private:
  inline void set_has_pkreply();
  inline void clear_has_pkreply();
  inline void set_has_noroutetohost();
  inline void clear_has_noroutetohost();
  inline void set_has_ttlout();
  inline void clear_has_ttlout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::agmp_PKREPLY* pkreply_;
  ::proto::agmp_NOROUTTOHOST* noroutetohost_;
  ::proto::agmp_TTLOUT* ttlout_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static agmp* default_instance_;
};
// ===================================================================


// ===================================================================

// avpacket_ack_control

// required uint64 ack_seq = 1;
inline bool avpacket_ack_control::has_ack_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void avpacket_ack_control::set_has_ack_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void avpacket_ack_control::clear_has_ack_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void avpacket_ack_control::clear_ack_seq() {
  ack_seq_ = GOOGLE_ULONGLONG(0);
  clear_has_ack_seq();
}
inline ::google::protobuf::uint64 avpacket_ack_control::ack_seq() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.ack_control.ack_seq)
  return ack_seq_;
}
inline void avpacket_ack_control::set_ack_seq(::google::protobuf::uint64 value) {
  set_has_ack_seq();
  ack_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.avpacket.ack_control.ack_seq)
}

// -------------------------------------------------------------------

// avpacket

// required .proto.av_address src = 1;
inline bool avpacket::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void avpacket::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void avpacket::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void avpacket::clear_src() {
  if (src_ != NULL) src_->::proto::av_address::Clear();
  clear_has_src();
}
inline const ::proto::av_address& avpacket::src() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.src)
  return src_ != NULL ? *src_ : *default_instance_->src_;
}
inline ::proto::av_address* avpacket::mutable_src() {
  set_has_src();
  if (src_ == NULL) src_ = new ::proto::av_address;
  // @@protoc_insertion_point(field_mutable:proto.avpacket.src)
  return src_;
}
inline ::proto::av_address* avpacket::release_src() {
  clear_has_src();
  ::proto::av_address* temp = src_;
  src_ = NULL;
  return temp;
}
inline void avpacket::set_allocated_src(::proto::av_address* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.avpacket.src)
}

// required .proto.av_address dest = 2;
inline bool avpacket::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void avpacket::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void avpacket::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void avpacket::clear_dest() {
  if (dest_ != NULL) dest_->::proto::av_address::Clear();
  clear_has_dest();
}
inline const ::proto::av_address& avpacket::dest() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.dest)
  return dest_ != NULL ? *dest_ : *default_instance_->dest_;
}
inline ::proto::av_address* avpacket::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) dest_ = new ::proto::av_address;
  // @@protoc_insertion_point(field_mutable:proto.avpacket.dest)
  return dest_;
}
inline ::proto::av_address* avpacket::release_dest() {
  clear_has_dest();
  ::proto::av_address* temp = dest_;
  dest_ = NULL;
  return temp;
}
inline void avpacket::set_allocated_dest(::proto::av_address* dest) {
  delete dest_;
  dest_ = dest;
  if (dest) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.avpacket.dest)
}

// optional bytes publickey = 3;
inline bool avpacket::has_publickey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void avpacket::set_has_publickey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void avpacket::clear_has_publickey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void avpacket::clear_publickey() {
  if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_->clear();
  }
  clear_has_publickey();
}
inline const ::std::string& avpacket::publickey() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.publickey)
  return *publickey_;
}
inline void avpacket::set_publickey(const ::std::string& value) {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  publickey_->assign(value);
  // @@protoc_insertion_point(field_set:proto.avpacket.publickey)
}
inline void avpacket::set_publickey(const char* value) {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  publickey_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.avpacket.publickey)
}
inline void avpacket::set_publickey(const void* value, size_t size) {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  publickey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.avpacket.publickey)
}
inline ::std::string* avpacket::mutable_publickey() {
  set_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    publickey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.avpacket.publickey)
  return publickey_;
}
inline ::std::string* avpacket::release_publickey() {
  clear_has_publickey();
  if (publickey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = publickey_;
    publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void avpacket::set_allocated_publickey(::std::string* publickey) {
  if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publickey_;
  }
  if (publickey) {
    set_has_publickey();
    publickey_ = publickey;
  } else {
    clear_has_publickey();
    publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.avpacket.publickey)
}

// required uint32 time_to_live = 4 [default = 64];
inline bool avpacket::has_time_to_live() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void avpacket::set_has_time_to_live() {
  _has_bits_[0] |= 0x00000008u;
}
inline void avpacket::clear_has_time_to_live() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void avpacket::clear_time_to_live() {
  time_to_live_ = 64u;
  clear_has_time_to_live();
}
inline ::google::protobuf::uint32 avpacket::time_to_live() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.time_to_live)
  return time_to_live_;
}
inline void avpacket::set_time_to_live(::google::protobuf::uint32 value) {
  set_has_time_to_live();
  time_to_live_ = value;
  // @@protoc_insertion_point(field_set:proto.avpacket.time_to_live)
}

// required string upperlayerpotocol = 6 [default = "avim"];
inline bool avpacket::has_upperlayerpotocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void avpacket::set_has_upperlayerpotocol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void avpacket::clear_has_upperlayerpotocol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void avpacket::clear_upperlayerpotocol() {
  if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
    upperlayerpotocol_->assign(*_default_upperlayerpotocol_);
  }
  clear_has_upperlayerpotocol();
}
inline const ::std::string& avpacket::upperlayerpotocol() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.upperlayerpotocol)
  return *upperlayerpotocol_;
}
inline void avpacket::set_upperlayerpotocol(const ::std::string& value) {
  set_has_upperlayerpotocol();
  if (upperlayerpotocol_ == _default_upperlayerpotocol_) {
    upperlayerpotocol_ = new ::std::string;
  }
  upperlayerpotocol_->assign(value);
  // @@protoc_insertion_point(field_set:proto.avpacket.upperlayerpotocol)
}
inline void avpacket::set_upperlayerpotocol(const char* value) {
  set_has_upperlayerpotocol();
  if (upperlayerpotocol_ == _default_upperlayerpotocol_) {
    upperlayerpotocol_ = new ::std::string;
  }
  upperlayerpotocol_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.avpacket.upperlayerpotocol)
}
inline void avpacket::set_upperlayerpotocol(const char* value, size_t size) {
  set_has_upperlayerpotocol();
  if (upperlayerpotocol_ == _default_upperlayerpotocol_) {
    upperlayerpotocol_ = new ::std::string;
  }
  upperlayerpotocol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.avpacket.upperlayerpotocol)
}
inline ::std::string* avpacket::mutable_upperlayerpotocol() {
  set_has_upperlayerpotocol();
  if (upperlayerpotocol_ == _default_upperlayerpotocol_) {
    upperlayerpotocol_ = new ::std::string(*_default_upperlayerpotocol_);
  }
  // @@protoc_insertion_point(field_mutable:proto.avpacket.upperlayerpotocol)
  return upperlayerpotocol_;
}
inline ::std::string* avpacket::release_upperlayerpotocol() {
  clear_has_upperlayerpotocol();
  if (upperlayerpotocol_ == _default_upperlayerpotocol_) {
    return NULL;
  } else {
    ::std::string* temp = upperlayerpotocol_;
    upperlayerpotocol_ = const_cast< ::std::string*>(_default_upperlayerpotocol_);
    return temp;
  }
}
inline void avpacket::set_allocated_upperlayerpotocol(::std::string* upperlayerpotocol) {
  if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
    delete upperlayerpotocol_;
  }
  if (upperlayerpotocol) {
    set_has_upperlayerpotocol();
    upperlayerpotocol_ = upperlayerpotocol;
  } else {
    clear_has_upperlayerpotocol();
    upperlayerpotocol_ = const_cast< ::std::string*>(_default_upperlayerpotocol_);
  }
  // @@protoc_insertion_point(field_set_allocated:proto.avpacket.upperlayerpotocol)
}

// optional uint32 encrype_method = 7 [default = 0];
inline bool avpacket::has_encrype_method() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void avpacket::set_has_encrype_method() {
  _has_bits_[0] |= 0x00000020u;
}
inline void avpacket::clear_has_encrype_method() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void avpacket::clear_encrype_method() {
  encrype_method_ = 0u;
  clear_has_encrype_method();
}
inline ::google::protobuf::uint32 avpacket::encrype_method() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.encrype_method)
  return encrype_method_;
}
inline void avpacket::set_encrype_method(::google::protobuf::uint32 value) {
  set_has_encrype_method();
  encrype_method_ = value;
  // @@protoc_insertion_point(field_set:proto.avpacket.encrype_method)
}

// optional bool msg_dont_route = 9;
inline bool avpacket::has_msg_dont_route() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void avpacket::set_has_msg_dont_route() {
  _has_bits_[0] |= 0x00000040u;
}
inline void avpacket::clear_has_msg_dont_route() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void avpacket::clear_msg_dont_route() {
  msg_dont_route_ = false;
  clear_has_msg_dont_route();
}
inline bool avpacket::msg_dont_route() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.msg_dont_route)
  return msg_dont_route_;
}
inline void avpacket::set_msg_dont_route(bool value) {
  set_has_msg_dont_route();
  msg_dont_route_ = value;
  // @@protoc_insertion_point(field_set:proto.avpacket.msg_dont_route)
}

// optional uint64 timestamp = 10;
inline bool avpacket::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void avpacket::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void avpacket::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void avpacket::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 avpacket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.timestamp)
  return timestamp_;
}
inline void avpacket::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.avpacket.timestamp)
}

// optional .proto.avpacket.ack_control need_seq = 11;
inline bool avpacket::has_need_seq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void avpacket::set_has_need_seq() {
  _has_bits_[0] |= 0x00000100u;
}
inline void avpacket::clear_has_need_seq() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void avpacket::clear_need_seq() {
  if (need_seq_ != NULL) need_seq_->::proto::avpacket_ack_control::Clear();
  clear_has_need_seq();
}
inline const ::proto::avpacket_ack_control& avpacket::need_seq() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.need_seq)
  return need_seq_ != NULL ? *need_seq_ : *default_instance_->need_seq_;
}
inline ::proto::avpacket_ack_control* avpacket::mutable_need_seq() {
  set_has_need_seq();
  if (need_seq_ == NULL) need_seq_ = new ::proto::avpacket_ack_control;
  // @@protoc_insertion_point(field_mutable:proto.avpacket.need_seq)
  return need_seq_;
}
inline ::proto::avpacket_ack_control* avpacket::release_need_seq() {
  clear_has_need_seq();
  ::proto::avpacket_ack_control* temp = need_seq_;
  need_seq_ = NULL;
  return temp;
}
inline void avpacket::set_allocated_need_seq(::proto::avpacket_ack_control* need_seq) {
  delete need_seq_;
  need_seq_ = need_seq;
  if (need_seq) {
    set_has_need_seq();
  } else {
    clear_has_need_seq();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.avpacket.need_seq)
}

// optional bytes payload = 8;
inline bool avpacket::has_payload() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void avpacket::set_has_payload() {
  _has_bits_[0] |= 0x00000200u;
}
inline void avpacket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void avpacket::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& avpacket::payload() const {
  // @@protoc_insertion_point(field_get:proto.avpacket.payload)
  return *payload_;
}
inline void avpacket::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:proto.avpacket.payload)
}
inline void avpacket::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.avpacket.payload)
}
inline void avpacket::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.avpacket.payload)
}
inline ::std::string* avpacket::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.avpacket.payload)
  return payload_;
}
inline ::std::string* avpacket::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void avpacket::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.avpacket.payload)
}

// -------------------------------------------------------------------

// agmp_PKREPLY

// required bytes x509_cert = 1;
inline bool agmp_PKREPLY::has_x509_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agmp_PKREPLY::set_has_x509_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agmp_PKREPLY::clear_has_x509_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agmp_PKREPLY::clear_x509_cert() {
  if (x509_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    x509_cert_->clear();
  }
  clear_has_x509_cert();
}
inline const ::std::string& agmp_PKREPLY::x509_cert() const {
  // @@protoc_insertion_point(field_get:proto.agmp.PKREPLY.x509_cert)
  return *x509_cert_;
}
inline void agmp_PKREPLY::set_x509_cert(const ::std::string& value) {
  set_has_x509_cert();
  if (x509_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    x509_cert_ = new ::std::string;
  }
  x509_cert_->assign(value);
  // @@protoc_insertion_point(field_set:proto.agmp.PKREPLY.x509_cert)
}
inline void agmp_PKREPLY::set_x509_cert(const char* value) {
  set_has_x509_cert();
  if (x509_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    x509_cert_ = new ::std::string;
  }
  x509_cert_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.agmp.PKREPLY.x509_cert)
}
inline void agmp_PKREPLY::set_x509_cert(const void* value, size_t size) {
  set_has_x509_cert();
  if (x509_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    x509_cert_ = new ::std::string;
  }
  x509_cert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.agmp.PKREPLY.x509_cert)
}
inline ::std::string* agmp_PKREPLY::mutable_x509_cert() {
  set_has_x509_cert();
  if (x509_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    x509_cert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.agmp.PKREPLY.x509_cert)
  return x509_cert_;
}
inline ::std::string* agmp_PKREPLY::release_x509_cert() {
  clear_has_x509_cert();
  if (x509_cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = x509_cert_;
    x509_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void agmp_PKREPLY::set_allocated_x509_cert(::std::string* x509_cert) {
  if (x509_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete x509_cert_;
  }
  if (x509_cert) {
    set_has_x509_cert();
    x509_cert_ = x509_cert;
  } else {
    clear_has_x509_cert();
    x509_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.agmp.PKREPLY.x509_cert)
}

// -------------------------------------------------------------------

// agmp_NOROUTTOHOST

// required .proto.av_address host = 1;
inline bool agmp_NOROUTTOHOST::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agmp_NOROUTTOHOST::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agmp_NOROUTTOHOST::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agmp_NOROUTTOHOST::clear_host() {
  if (host_ != NULL) host_->::proto::av_address::Clear();
  clear_has_host();
}
inline const ::proto::av_address& agmp_NOROUTTOHOST::host() const {
  // @@protoc_insertion_point(field_get:proto.agmp.NOROUTTOHOST.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::proto::av_address* agmp_NOROUTTOHOST::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::proto::av_address;
  // @@protoc_insertion_point(field_mutable:proto.agmp.NOROUTTOHOST.host)
  return host_;
}
inline ::proto::av_address* agmp_NOROUTTOHOST::release_host() {
  clear_has_host();
  ::proto::av_address* temp = host_;
  host_ = NULL;
  return temp;
}
inline void agmp_NOROUTTOHOST::set_allocated_host(::proto::av_address* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.agmp.NOROUTTOHOST.host)
}

// -------------------------------------------------------------------

// agmp_TTLOUT

// required .proto.av_address host = 1;
inline bool agmp_TTLOUT::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agmp_TTLOUT::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agmp_TTLOUT::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agmp_TTLOUT::clear_host() {
  if (host_ != NULL) host_->::proto::av_address::Clear();
  clear_has_host();
}
inline const ::proto::av_address& agmp_TTLOUT::host() const {
  // @@protoc_insertion_point(field_get:proto.agmp.TTLOUT.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::proto::av_address* agmp_TTLOUT::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::proto::av_address;
  // @@protoc_insertion_point(field_mutable:proto.agmp.TTLOUT.host)
  return host_;
}
inline ::proto::av_address* agmp_TTLOUT::release_host() {
  clear_has_host();
  ::proto::av_address* temp = host_;
  host_ = NULL;
  return temp;
}
inline void agmp_TTLOUT::set_allocated_host(::proto::av_address* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.agmp.TTLOUT.host)
}

// -------------------------------------------------------------------

// agmp

// optional .proto.agmp.PKREPLY pkreply = 1;
inline bool agmp::has_pkreply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agmp::set_has_pkreply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agmp::clear_has_pkreply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agmp::clear_pkreply() {
  if (pkreply_ != NULL) pkreply_->::proto::agmp_PKREPLY::Clear();
  clear_has_pkreply();
}
inline const ::proto::agmp_PKREPLY& agmp::pkreply() const {
  // @@protoc_insertion_point(field_get:proto.agmp.pkreply)
  return pkreply_ != NULL ? *pkreply_ : *default_instance_->pkreply_;
}
inline ::proto::agmp_PKREPLY* agmp::mutable_pkreply() {
  set_has_pkreply();
  if (pkreply_ == NULL) pkreply_ = new ::proto::agmp_PKREPLY;
  // @@protoc_insertion_point(field_mutable:proto.agmp.pkreply)
  return pkreply_;
}
inline ::proto::agmp_PKREPLY* agmp::release_pkreply() {
  clear_has_pkreply();
  ::proto::agmp_PKREPLY* temp = pkreply_;
  pkreply_ = NULL;
  return temp;
}
inline void agmp::set_allocated_pkreply(::proto::agmp_PKREPLY* pkreply) {
  delete pkreply_;
  pkreply_ = pkreply;
  if (pkreply) {
    set_has_pkreply();
  } else {
    clear_has_pkreply();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.agmp.pkreply)
}

// optional .proto.agmp.NOROUTTOHOST noroutetohost = 2;
inline bool agmp::has_noroutetohost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agmp::set_has_noroutetohost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agmp::clear_has_noroutetohost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agmp::clear_noroutetohost() {
  if (noroutetohost_ != NULL) noroutetohost_->::proto::agmp_NOROUTTOHOST::Clear();
  clear_has_noroutetohost();
}
inline const ::proto::agmp_NOROUTTOHOST& agmp::noroutetohost() const {
  // @@protoc_insertion_point(field_get:proto.agmp.noroutetohost)
  return noroutetohost_ != NULL ? *noroutetohost_ : *default_instance_->noroutetohost_;
}
inline ::proto::agmp_NOROUTTOHOST* agmp::mutable_noroutetohost() {
  set_has_noroutetohost();
  if (noroutetohost_ == NULL) noroutetohost_ = new ::proto::agmp_NOROUTTOHOST;
  // @@protoc_insertion_point(field_mutable:proto.agmp.noroutetohost)
  return noroutetohost_;
}
inline ::proto::agmp_NOROUTTOHOST* agmp::release_noroutetohost() {
  clear_has_noroutetohost();
  ::proto::agmp_NOROUTTOHOST* temp = noroutetohost_;
  noroutetohost_ = NULL;
  return temp;
}
inline void agmp::set_allocated_noroutetohost(::proto::agmp_NOROUTTOHOST* noroutetohost) {
  delete noroutetohost_;
  noroutetohost_ = noroutetohost;
  if (noroutetohost) {
    set_has_noroutetohost();
  } else {
    clear_has_noroutetohost();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.agmp.noroutetohost)
}

// optional .proto.agmp.TTLOUT ttlout = 3;
inline bool agmp::has_ttlout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void agmp::set_has_ttlout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void agmp::clear_has_ttlout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void agmp::clear_ttlout() {
  if (ttlout_ != NULL) ttlout_->::proto::agmp_TTLOUT::Clear();
  clear_has_ttlout();
}
inline const ::proto::agmp_TTLOUT& agmp::ttlout() const {
  // @@protoc_insertion_point(field_get:proto.agmp.ttlout)
  return ttlout_ != NULL ? *ttlout_ : *default_instance_->ttlout_;
}
inline ::proto::agmp_TTLOUT* agmp::mutable_ttlout() {
  set_has_ttlout();
  if (ttlout_ == NULL) ttlout_ = new ::proto::agmp_TTLOUT;
  // @@protoc_insertion_point(field_mutable:proto.agmp.ttlout)
  return ttlout_;
}
inline ::proto::agmp_TTLOUT* agmp::release_ttlout() {
  clear_has_ttlout();
  ::proto::agmp_TTLOUT* temp = ttlout_;
  ttlout_ = NULL;
  return temp;
}
inline void agmp::set_allocated_ttlout(::proto::agmp_TTLOUT* ttlout) {
  delete ttlout_;
  ttlout_ = ttlout;
  if (ttlout) {
    set_has_ttlout();
  } else {
    clear_has_ttlout();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.agmp.ttlout)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
