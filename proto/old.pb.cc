// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: old.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "old.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace avoldtcpproto {

namespace {

const ::google::protobuf::Descriptor* avTCPPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avTCPPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_old_2eproto() {
  protobuf_AddDesc_old_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "old.proto");
  GOOGLE_CHECK(file != NULL);
  avTCPPacket_descriptor_ = file->message_type(0);
  static const int avTCPPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, avpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, endpoint_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, endpoint_cert_),
  };
  avTCPPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avTCPPacket_descriptor_,
      avTCPPacket::default_instance_,
      avTCPPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avTCPPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avTCPPacket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_old_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avTCPPacket_descriptor_, &avTCPPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_old_2eproto() {
  delete avTCPPacket::default_instance_;
  delete avTCPPacket_reflection_;
}

void protobuf_AddDesc_old_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_AddDesc_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\told.proto\022\ravoldtcpproto\032\rmessage.prot"
    "o\"\201\001\n\013avTCPPacket\022\014\n\004type\030\001 \002(\r\022!\n\010avpac"
    "ket\030\002 \001(\0132\017.proto.avPacket\022*\n\020endpoint_a"
    "ddress\030\003 \001(\0132\020.proto.avAddress\022\025\n\rendpoi"
    "nt_cert\030\004 \001(\014", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "old.proto", &protobuf_RegisterTypes);
  avTCPPacket::default_instance_ = new avTCPPacket();
  avTCPPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_old_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_old_2eproto {
  StaticDescriptorInitializer_old_2eproto() {
    protobuf_AddDesc_old_2eproto();
  }
} static_descriptor_initializer_old_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int avTCPPacket::kTypeFieldNumber;
const int avTCPPacket::kAvpacketFieldNumber;
const int avTCPPacket::kEndpointAddressFieldNumber;
const int avTCPPacket::kEndpointCertFieldNumber;
#endif  // !_MSC_VER

avTCPPacket::avTCPPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avoldtcpproto.avTCPPacket)
}

void avTCPPacket::InitAsDefaultInstance() {
  avpacket_ = const_cast< ::proto::avPacket*>(&::proto::avPacket::default_instance());
  endpoint_address_ = const_cast< ::proto::avAddress*>(&::proto::avAddress::default_instance());
}

avTCPPacket::avTCPPacket(const avTCPPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:avoldtcpproto.avTCPPacket)
}

void avTCPPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  avpacket_ = NULL;
  endpoint_address_ = NULL;
  endpoint_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

avTCPPacket::~avTCPPacket() {
  // @@protoc_insertion_point(destructor:avoldtcpproto.avTCPPacket)
  SharedDtor();
}

void avTCPPacket::SharedDtor() {
  if (endpoint_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_cert_;
  }
  if (this != default_instance_) {
    delete avpacket_;
    delete endpoint_address_;
  }
}

void avTCPPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avTCPPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avTCPPacket_descriptor_;
}

const avTCPPacket& avTCPPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_old_2eproto();
  return *default_instance_;
}

avTCPPacket* avTCPPacket::default_instance_ = NULL;

avTCPPacket* avTCPPacket::New() const {
  return new avTCPPacket;
}

void avTCPPacket::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0u;
    if (has_avpacket()) {
      if (avpacket_ != NULL) avpacket_->::proto::avPacket::Clear();
    }
    if (has_endpoint_address()) {
      if (endpoint_address_ != NULL) endpoint_address_->::proto::avAddress::Clear();
    }
    if (has_endpoint_cert()) {
      if (endpoint_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endpoint_cert_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avTCPPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:avoldtcpproto.avTCPPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avpacket;
        break;
      }

      // optional .proto.avPacket avpacket = 2;
      case 2: {
        if (tag == 18) {
         parse_avpacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_endpoint_address;
        break;
      }

      // optional .proto.avAddress endpoint_address = 3;
      case 3: {
        if (tag == 26) {
         parse_endpoint_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_endpoint_cert;
        break;
      }

      // optional bytes endpoint_cert = 4;
      case 4: {
        if (tag == 34) {
         parse_endpoint_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_endpoint_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:avoldtcpproto.avTCPPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:avoldtcpproto.avTCPPacket)
  return false;
#undef DO_
}

void avTCPPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:avoldtcpproto.avTCPPacket)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .proto.avPacket avpacket = 2;
  if (has_avpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->avpacket(), output);
  }

  // optional .proto.avAddress endpoint_address = 3;
  if (has_endpoint_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endpoint_address(), output);
  }

  // optional bytes endpoint_cert = 4;
  if (has_endpoint_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->endpoint_cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:avoldtcpproto.avTCPPacket)
}

::google::protobuf::uint8* avTCPPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:avoldtcpproto.avTCPPacket)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional .proto.avPacket avpacket = 2;
  if (has_avpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->avpacket(), target);
  }

  // optional .proto.avAddress endpoint_address = 3;
  if (has_endpoint_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->endpoint_address(), target);
  }

  // optional bytes endpoint_cert = 4;
  if (has_endpoint_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->endpoint_cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avoldtcpproto.avTCPPacket)
  return target;
}

int avTCPPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .proto.avPacket avpacket = 2;
    if (has_avpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avpacket());
    }

    // optional .proto.avAddress endpoint_address = 3;
    if (has_endpoint_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint_address());
    }

    // optional bytes endpoint_cert = 4;
    if (has_endpoint_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->endpoint_cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avTCPPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avTCPPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avTCPPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avTCPPacket::MergeFrom(const avTCPPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_avpacket()) {
      mutable_avpacket()->::proto::avPacket::MergeFrom(from.avpacket());
    }
    if (from.has_endpoint_address()) {
      mutable_endpoint_address()->::proto::avAddress::MergeFrom(from.endpoint_address());
    }
    if (from.has_endpoint_cert()) {
      set_endpoint_cert(from.endpoint_cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avTCPPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avTCPPacket::CopyFrom(const avTCPPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avTCPPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_avpacket()) {
    if (!this->avpacket().IsInitialized()) return false;
  }
  if (has_endpoint_address()) {
    if (!this->endpoint_address().IsInitialized()) return false;
  }
  return true;
}

void avTCPPacket::Swap(avTCPPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(avpacket_, other->avpacket_);
    std::swap(endpoint_address_, other->endpoint_address_);
    std::swap(endpoint_cert_, other->endpoint_cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avTCPPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avTCPPacket_descriptor_;
  metadata.reflection = avTCPPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace avoldtcpproto

// @@protoc_insertion_point(global_scope)
