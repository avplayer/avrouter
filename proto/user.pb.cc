// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* client_hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* server_hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* login_result_login_result_code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* username_availability_check_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  username_availability_check_reflection_ = NULL;
const ::google::protobuf::Descriptor* username_availability_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  username_availability_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* username_availability_result_username_availability_result_code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_register_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_register_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_register_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_register_result_user_register_result_code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_cert_lost_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_cert_lost_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_cert_lost_verify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_cert_lost_verify_reflection_ = NULL;
const ::google::protobuf::Descriptor* buddy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buddy_reflection_ = NULL;
const ::google::protobuf::Descriptor* buddy_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buddy_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* request_buddy_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_buddy_list_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_2eproto() {
  protobuf_AddDesc_user_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user.proto");
  GOOGLE_CHECK(file != NULL);
  client_hello_descriptor_ = file->message_type(0);
  static const int client_hello_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, random_g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, random_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, random_pub_key_),
  };
  client_hello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      client_hello_descriptor_,
      client_hello::default_instance_,
      client_hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, _has_bits_[0]),
      -1,
      -1,
      sizeof(client_hello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_hello, _internal_metadata_),
      -1);
  server_hello_descriptor_ = file->message_type(1);
  static const int server_hello_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_hello, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_hello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_hello, random_pub_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_hello, server_av_address_),
  };
  server_hello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      server_hello_descriptor_,
      server_hello::default_instance_,
      server_hello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_hello, _has_bits_[0]),
      -1,
      -1,
      sizeof(server_hello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_hello, _internal_metadata_),
      -1);
  login_descriptor_ = file->message_type(2);
  static const int login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, user_cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, encryped_radom_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, other_info_),
  };
  login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      login_descriptor_,
      login::default_instance_,
      login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _has_bits_[0]),
      -1,
      -1,
      sizeof(login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login, _internal_metadata_),
      -1);
  login_result_descriptor_ = file->message_type(3);
  static const int login_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_result, result_),
  };
  login_result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      login_result_descriptor_,
      login_result::default_instance_,
      login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_result, _has_bits_[0]),
      -1,
      -1,
      sizeof(login_result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_result, _internal_metadata_),
      -1);
  login_result_login_result_code_descriptor_ = login_result_descriptor_->enum_type(0);
  username_availability_check_descriptor_ = file->message_type(4);
  static const int username_availability_check_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(username_availability_check, user_name_),
  };
  username_availability_check_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      username_availability_check_descriptor_,
      username_availability_check::default_instance_,
      username_availability_check_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(username_availability_check, _has_bits_[0]),
      -1,
      -1,
      sizeof(username_availability_check),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(username_availability_check, _internal_metadata_),
      -1);
  username_availability_result_descriptor_ = file->message_type(5);
  static const int username_availability_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(username_availability_result, result_),
  };
  username_availability_result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      username_availability_result_descriptor_,
      username_availability_result::default_instance_,
      username_availability_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(username_availability_result, _has_bits_[0]),
      -1,
      -1,
      sizeof(username_availability_result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(username_availability_result, _internal_metadata_),
      -1);
  username_availability_result_username_availability_result_code_descriptor_ = username_availability_result_descriptor_->enum_type(0);
  user_register_descriptor_ = file->message_type(6);
  static const int user_register_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, rsa_pubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, csr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, mail_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, cell_phone_),
  };
  user_register_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_register_descriptor_,
      user_register::default_instance_,
      user_register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, _has_bits_[0]),
      -1,
      -1,
      sizeof(user_register),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register, _internal_metadata_),
      -1);
  user_register_result_descriptor_ = file->message_type(7);
  static const int user_register_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register_result, cert_),
  };
  user_register_result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_register_result_descriptor_,
      user_register_result::default_instance_,
      user_register_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register_result, _has_bits_[0]),
      -1,
      -1,
      sizeof(user_register_result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_register_result, _internal_metadata_),
      -1);
  user_register_result_user_register_result_code_descriptor_ = user_register_result_descriptor_->enum_type(0);
  user_cert_lost_request_descriptor_ = file->message_type(8);
  static const int user_cert_lost_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_request, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_request, mail_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_request, cell_phone_),
  };
  user_cert_lost_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_cert_lost_request_descriptor_,
      user_cert_lost_request::default_instance_,
      user_cert_lost_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_request, _has_bits_[0]),
      -1,
      -1,
      sizeof(user_cert_lost_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_request, _internal_metadata_),
      -1);
  user_cert_lost_verify_descriptor_ = file->message_type(9);
  static const int user_cert_lost_verify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_verify, secret_code_),
  };
  user_cert_lost_verify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      user_cert_lost_verify_descriptor_,
      user_cert_lost_verify::default_instance_,
      user_cert_lost_verify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_verify, _has_bits_[0]),
      -1,
      -1,
      sizeof(user_cert_lost_verify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_cert_lost_verify, _internal_metadata_),
      -1);
  buddy_descriptor_ = file->message_type(10);
  static const int buddy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy, labels_),
  };
  buddy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      buddy_descriptor_,
      buddy::default_instance_,
      buddy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy, _has_bits_[0]),
      -1,
      -1,
      sizeof(buddy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy, _internal_metadata_),
      -1);
  buddy_list_descriptor_ = file->message_type(11);
  static const int buddy_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy_list, buddies_),
  };
  buddy_list_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      buddy_list_descriptor_,
      buddy_list::default_instance_,
      buddy_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy_list, _has_bits_[0]),
      -1,
      -1,
      sizeof(buddy_list),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buddy_list, _internal_metadata_),
      -1);
  request_buddy_list_descriptor_ = file->message_type(12);
  static const int request_buddy_list_offsets_[1] = {
  };
  request_buddy_list_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      request_buddy_list_descriptor_,
      request_buddy_list::default_instance_,
      request_buddy_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_buddy_list, _has_bits_[0]),
      -1,
      -1,
      sizeof(request_buddy_list),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request_buddy_list, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      client_hello_descriptor_, &client_hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      server_hello_descriptor_, &server_hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      login_descriptor_, &login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      login_result_descriptor_, &login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      username_availability_check_descriptor_, &username_availability_check::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      username_availability_result_descriptor_, &username_availability_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_register_descriptor_, &user_register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_register_result_descriptor_, &user_register_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_cert_lost_request_descriptor_, &user_cert_lost_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      user_cert_lost_verify_descriptor_, &user_cert_lost_verify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      buddy_descriptor_, &buddy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      buddy_list_descriptor_, &buddy_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      request_buddy_list_descriptor_, &request_buddy_list::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_2eproto() {
  delete client_hello::default_instance_;
  delete client_hello_reflection_;
  delete server_hello::default_instance_;
  delete server_hello_reflection_;
  delete login::default_instance_;
  delete login_reflection_;
  delete login_result::default_instance_;
  delete login_result_reflection_;
  delete username_availability_check::default_instance_;
  delete username_availability_check_reflection_;
  delete username_availability_result::default_instance_;
  delete username_availability_result_reflection_;
  delete user_register::default_instance_;
  delete user_register_reflection_;
  delete user_register_result::default_instance_;
  delete user_register_result_reflection_;
  delete user_cert_lost_request::default_instance_;
  delete user_cert_lost_request_reflection_;
  delete user_cert_lost_verify::default_instance_;
  delete user_cert_lost_verify_reflection_;
  delete buddy::default_instance_;
  delete buddy_reflection_;
  delete buddy_list::default_instance_;
  delete buddy_list_reflection_;
  delete request_buddy_list::default_instance_;
  delete request_buddy_list_reflection_;
}

void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_AddDesc_address_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuser.proto\022\005proto\032\raddress.proto\"k\n\014cl"
    "ient_hello\022\016\n\006client\030\001 \002(\t\022\017\n\007version\030\002 "
    "\002(\r\022\020\n\010random_g\030\003 \002(\014\022\020\n\010random_p\030\004 \002(\014\022"
    "\026\n\016random_pub_key\030\005 \002(\014\"f\n\014server_hello\022"
    "\022\n\nservername\030\001 \002(\t\022\017\n\007version\030\002 \002(\r\022\026\n\016"
    "random_pub_key\030\003 \002(\014\022\031\n\021server_av_addres"
    "s\030\004 \002(\t\"J\n\005login\022\021\n\tuser_cert\030\001 \002(\014\022\032\n\022e"
    "ncryped_radom_key\030\002 \002(\014\022\022\n\nother_info\030\003 "
    "\001(\t\"\257\001\n\014login_result\0225\n\006result\030\001 \002(\0162%.p"
    "roto.login_result.login_result_code\"h\n\021l"
    "ogin_result_code\022\021\n\rLOGIN_SUCCEED\020\000\022\020\n\014N"
    "O_SUCH_USER\020\001\022\025\n\021PEREMISSON_DENIED\020\002\022\027\n\023"
    "PUBLIC_KEY_MISMATCH\020\003\"0\n\033username_availa"
    "bility_check\022\021\n\tuser_name\030\001 \002(\t\"\321\001\n\034user"
    "name_availability_result\022U\n\006result\030\001 \002(\016"
    "2E.proto.username_availability_result.us"
    "ername_availability_result_code\"Z\n!usern"
    "ame_availability_result_code\022\022\n\016NAME_AVA"
    "ILABLE\020\000\022\021\n\rNAME_DISALLOW\020\001\022\016\n\nNAME_TAKE"
    "N\020\002\"m\n\ruser_register\022\021\n\tuser_name\030\001 \002(\t\022"
    "\022\n\nrsa_pubkey\030\002 \002(\014\022\013\n\003CSR\030\003 \002(\014\022\024\n\014mail"
    "_address\030\004 \001(\t\022\022\n\ncell_phone\030\005 \001(\t\"\347\002\n\024u"
    "ser_register_result\022E\n\006result\030\001 \002(\01625.pr"
    "oto.user_register_result.user_register_r"
    "esult_code\022\014\n\004cert\030\002 \001(\014\"\371\001\n\031user_regist"
    "er_result_code\022\024\n\020REGISTER_SUCCEED\020\000\022\033\n\027"
    "REGISTER_FAILED_CA_BUSY\020\001\022\036\n\032REGISTER_FA"
    "ILED_NAME_TAKEN\020\002\022!\n\035REGISTER_FAILED_TOO"
    "_SHORT_KEY\020\003\022!\n\035REGISTER_FAILED_NAME_DIS"
    "ALLOW\020\004\022\033\n\027REGISTER_FAILED_CA_DOWN\020\005\022&\n\""
    "REGISTER_FAILED_CSR_VERIFY_FAILURE\020\006\"U\n\026"
    "user_cert_lost_request\022\021\n\tuser_name\030\001 \002("
    "\t\022\024\n\014mail_address\030\003 \001(\t\022\022\n\ncell_phone\030\004 "
    "\001(\t\",\n\025user_cert_lost_verify\022\023\n\013secret_c"
    "ode\030\001 \002(\t\"F\n\005buddy\022\037\n\004addr\030\001 \002(\0132\021.proto"
    ".av_address\022\014\n\004nick\030\002 \001(\t\022\016\n\006labels\030\003 \003("
    "\t\"+\n\nbuddy_list\022\035\n\007buddies\030\001 \003(\0132\014.proto"
    ".buddy\"\024\n\022request_buddy_listP\000", 1510);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user.proto", &protobuf_RegisterTypes);
  client_hello::default_instance_ = new client_hello();
  server_hello::default_instance_ = new server_hello();
  login::default_instance_ = new login();
  login_result::default_instance_ = new login_result();
  username_availability_check::default_instance_ = new username_availability_check();
  username_availability_result::default_instance_ = new username_availability_result();
  user_register::default_instance_ = new user_register();
  user_register_result::default_instance_ = new user_register_result();
  user_cert_lost_request::default_instance_ = new user_cert_lost_request();
  user_cert_lost_verify::default_instance_ = new user_cert_lost_verify();
  buddy::default_instance_ = new buddy();
  buddy_list::default_instance_ = new buddy_list();
  request_buddy_list::default_instance_ = new request_buddy_list();
  client_hello::default_instance_->InitAsDefaultInstance();
  server_hello::default_instance_->InitAsDefaultInstance();
  login::default_instance_->InitAsDefaultInstance();
  login_result::default_instance_->InitAsDefaultInstance();
  username_availability_check::default_instance_->InitAsDefaultInstance();
  username_availability_result::default_instance_->InitAsDefaultInstance();
  user_register::default_instance_->InitAsDefaultInstance();
  user_register_result::default_instance_->InitAsDefaultInstance();
  user_cert_lost_request::default_instance_->InitAsDefaultInstance();
  user_cert_lost_verify::default_instance_->InitAsDefaultInstance();
  buddy::default_instance_->InitAsDefaultInstance();
  buddy_list::default_instance_->InitAsDefaultInstance();
  request_buddy_list::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int client_hello::kClientFieldNumber;
const int client_hello::kVersionFieldNumber;
const int client_hello::kRandomGFieldNumber;
const int client_hello::kRandomPFieldNumber;
const int client_hello::kRandomPubKeyFieldNumber;
#endif  // !_MSC_VER

client_hello::client_hello()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.client_hello)
}

void client_hello::InitAsDefaultInstance() {
}

client_hello::client_hello(const client_hello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.client_hello)
}

void client_hello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  random_g_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
client_hello::client_hello(client_hello&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

client_hello::~client_hello() {
  // @@protoc_insertion_point(destructor:proto.client_hello)
  SharedDtor();
}

void client_hello::SharedDtor() {
  client_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_g_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_p_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void client_hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_hello_descriptor_;
}

const client_hello& client_hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

client_hello* client_hello::default_instance_ = NULL;

client_hello* client_hello::New(::google::protobuf::Arena* arena) const {
  client_hello* n = new client_hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void client_hello::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_client()) {
      client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    version_ = 0u;
    if (has_random_g()) {
      random_g_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_random_p()) {
      random_p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_random_pub_key()) {
      random_pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool client_hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.client_hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client().data(), this->client().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.client_hello.client");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_random_g;
        break;
      }

      // required bytes random_g = 3;
      case 3: {
        if (tag == 26) {
         parse_random_g:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_g()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_random_p;
        break;
      }

      // required bytes random_p = 4;
      case 4: {
        if (tag == 34) {
         parse_random_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_p()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_random_pub_key;
        break;
      }

      // required bytes random_pub_key = 5;
      case 5: {
        if (tag == 42) {
         parse_random_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_pub_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.client_hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.client_hello)
  return false;
#undef DO_
}

void client_hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.client_hello)
  // required string client = 1;
  if (has_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.client_hello.client");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // required bytes random_g = 3;
  if (has_random_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->random_g(), output);
  }

  // required bytes random_p = 4;
  if (has_random_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->random_p(), output);
  }

  // required bytes random_pub_key = 5;
  if (has_random_pub_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->random_pub_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.client_hello)
}

::google::protobuf::uint8* client_hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.client_hello)
  // required string client = 1;
  if (has_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.client_hello.client");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // required bytes random_g = 3;
  if (has_random_g()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->random_g(), target);
  }

  // required bytes random_p = 4;
  if (has_random_p()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->random_p(), target);
  }

  // required bytes random_pub_key = 5;
  if (has_random_pub_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->random_pub_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.client_hello)
  return target;
}

int client_hello::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_client()) {
    // required string client = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client());
  }

  if (has_version()) {
    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_random_g()) {
    // required bytes random_g = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_g());
  }

  if (has_random_p()) {
    // required bytes random_p = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_p());
  }

  if (has_random_pub_key()) {
    // required bytes random_pub_key = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_pub_key());
  }

  return total_size;
}
int client_hello::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string client = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client());

    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required bytes random_g = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_g());

    // required bytes random_p = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_p());

    // required bytes random_pub_key = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_pub_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_hello::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const client_hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_hello::MergeFrom(const client_hello& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client()) {
      set_has_client();
      client_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_random_g()) {
      set_has_random_g();
      random_g_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_g_);
    }
    if (from.has_random_p()) {
      set_has_random_p();
      random_p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_p_);
    }
    if (from.has_random_pub_key()) {
      set_has_random_pub_key();
      random_pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_pub_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void client_hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_hello::CopyFrom(const client_hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void client_hello::Swap(client_hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void client_hello::InternalSwap(client_hello* other) {
  client_.Swap(&other->client_);
  std::swap(version_, other->version_);
  random_g_.Swap(&other->random_g_);
  random_p_.Swap(&other->random_p_);
  random_pub_key_.Swap(&other->random_pub_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata client_hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_hello_descriptor_;
  metadata.reflection = client_hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int server_hello::kServernameFieldNumber;
const int server_hello::kVersionFieldNumber;
const int server_hello::kRandomPubKeyFieldNumber;
const int server_hello::kServerAvAddressFieldNumber;
#endif  // !_MSC_VER

server_hello::server_hello()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.server_hello)
}

void server_hello::InitAsDefaultInstance() {
}

server_hello::server_hello(const server_hello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.server_hello)
}

void server_hello::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  random_pub_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_av_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
server_hello::server_hello(server_hello&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

server_hello::~server_hello() {
  // @@protoc_insertion_point(destructor:proto.server_hello)
  SharedDtor();
}

void server_hello::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_pub_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_av_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void server_hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_hello_descriptor_;
}

const server_hello& server_hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

server_hello* server_hello::default_instance_ = NULL;

server_hello* server_hello::New(::google::protobuf::Arena* arena) const {
  server_hello* n = new server_hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void server_hello::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_servername()) {
      servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    version_ = 0u;
    if (has_random_pub_key()) {
      random_pub_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_server_av_address()) {
      server_av_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool server_hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.server_hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string servername = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.server_hello.servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_random_pub_key;
        break;
      }

      // required bytes random_pub_key = 3;
      case 3: {
        if (tag == 26) {
         parse_random_pub_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random_pub_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_av_address;
        break;
      }

      // required string server_av_address = 4;
      case 4: {
        if (tag == 34) {
         parse_server_av_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_av_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_av_address().data(), this->server_av_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.server_hello.server_av_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.server_hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.server_hello)
  return false;
#undef DO_
}

void server_hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.server_hello)
  // required string servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.server_hello.servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // required bytes random_pub_key = 3;
  if (has_random_pub_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->random_pub_key(), output);
  }

  // required string server_av_address = 4;
  if (has_server_av_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_av_address().data(), this->server_av_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.server_hello.server_av_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_av_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.server_hello)
}

::google::protobuf::uint8* server_hello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.server_hello)
  // required string servername = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.server_hello.servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // required bytes random_pub_key = 3;
  if (has_random_pub_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->random_pub_key(), target);
  }

  // required string server_av_address = 4;
  if (has_server_av_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_av_address().data(), this->server_av_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.server_hello.server_av_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_av_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.server_hello)
  return target;
}

int server_hello::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_servername()) {
    // required string servername = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  if (has_version()) {
    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_random_pub_key()) {
    // required bytes random_pub_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_pub_key());
  }

  if (has_server_av_address()) {
    // required string server_av_address = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_av_address());
  }

  return total_size;
}
int server_hello::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string servername = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());

    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required bytes random_pub_key = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->random_pub_key());

    // required string server_av_address = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_av_address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_hello::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const server_hello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server_hello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server_hello::MergeFrom(const server_hello& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_has_servername();
      servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_random_pub_key()) {
      set_has_random_pub_key();
      random_pub_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.random_pub_key_);
    }
    if (from.has_server_av_address()) {
      set_has_server_av_address();
      server_av_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_av_address_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void server_hello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_hello::CopyFrom(const server_hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void server_hello::Swap(server_hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void server_hello::InternalSwap(server_hello* other) {
  servername_.Swap(&other->servername_);
  std::swap(version_, other->version_);
  random_pub_key_.Swap(&other->random_pub_key_);
  server_av_address_.Swap(&other->server_av_address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata server_hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_hello_descriptor_;
  metadata.reflection = server_hello_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login::kUserCertFieldNumber;
const int login::kEncrypedRadomKeyFieldNumber;
const int login::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

login::login()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login)
}

void login::InitAsDefaultInstance() {
}

login::login(const login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login)
}

void login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryped_radom_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
login::login(login&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

login::~login() {
  // @@protoc_insertion_point(destructor:proto.login)
  SharedDtor();
}

void login::SharedDtor() {
  user_cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryped_radom_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_descriptor_;
}

const login& login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

login* login::default_instance_ = NULL;

login* login::New(::google::protobuf::Arena* arena) const {
  login* n = new login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_user_cert()) {
      user_cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_encryped_radom_key()) {
      encryped_radom_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_other_info()) {
      other_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user_cert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_encryped_radom_key;
        break;
      }

      // required bytes encryped_radom_key = 2;
      case 2: {
        if (tag == 18) {
         parse_encryped_radom_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryped_radom_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_other_info;
        break;
      }

      // optional string other_info = 3;
      case 3: {
        if (tag == 26) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->other_info().data(), this->other_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.login.other_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login)
  return false;
#undef DO_
}

void login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login)
  // required bytes user_cert = 1;
  if (has_user_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_cert(), output);
  }

  // required bytes encryped_radom_key = 2;
  if (has_encryped_radom_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->encryped_radom_key(), output);
  }

  // optional string other_info = 3;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->other_info().data(), this->other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.login.other_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->other_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login)
}

::google::protobuf::uint8* login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login)
  // required bytes user_cert = 1;
  if (has_user_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_cert(), target);
  }

  // required bytes encryped_radom_key = 2;
  if (has_encryped_radom_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encryped_radom_key(), target);
  }

  // optional string other_info = 3;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->other_info().data(), this->other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.login.other_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->other_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login)
  return target;
}

int login::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_user_cert()) {
    // required bytes user_cert = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_cert());
  }

  if (has_encryped_radom_key()) {
    // required bytes encryped_radom_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryped_radom_key());
  }

  return total_size;
}
int login::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes user_cert = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_cert());

    // required bytes encryped_radom_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encryped_radom_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string other_info = 3;
  if (has_other_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->other_info());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login::MergeFrom(const login& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_cert()) {
      set_has_user_cert();
      user_cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_cert_);
    }
    if (from.has_encryped_radom_key()) {
      set_has_encryped_radom_key();
      encryped_radom_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryped_radom_key_);
    }
    if (from.has_other_info()) {
      set_has_other_info();
      other_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_info_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login::CopyFrom(const login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void login::Swap(login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login::InternalSwap(login* other) {
  user_cert_.Swap(&other->user_cert_);
  encryped_radom_key_.Swap(&other->encryped_radom_key_);
  other_info_.Swap(&other->other_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_descriptor_;
  metadata.reflection = login_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* login_result_login_result_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_result_login_result_code_descriptor_;
}
bool login_result_login_result_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const login_result_login_result_code login_result::LOGIN_SUCCEED;
const login_result_login_result_code login_result::NO_SUCH_USER;
const login_result_login_result_code login_result::PEREMISSON_DENIED;
const login_result_login_result_code login_result::PUBLIC_KEY_MISMATCH;
const login_result_login_result_code login_result::login_result_code_MIN;
const login_result_login_result_code login_result::login_result_code_MAX;
const int login_result::login_result_code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int login_result::kResultFieldNumber;
#endif  // !_MSC_VER

login_result::login_result()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login_result)
}

void login_result::InitAsDefaultInstance() {
}

login_result::login_result(const login_result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login_result)
}

void login_result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
login_result::login_result(login_result&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

login_result::~login_result() {
  // @@protoc_insertion_point(destructor:proto.login_result)
  SharedDtor();
}

void login_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_result_descriptor_;
}

const login_result& login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

login_result* login_result::default_instance_ = NULL;

login_result* login_result::New(::google::protobuf::Arena* arena) const {
  login_result* n = new login_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login_result::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.login_result.login_result_code result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::login_result_login_result_code_IsValid(value)) {
            set_result(static_cast< ::proto::login_result_login_result_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login_result)
  return false;
#undef DO_
}

void login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login_result)
  // required .proto.login_result.login_result_code result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login_result)
}

::google::protobuf::uint8* login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login_result)
  // required .proto.login_result.login_result_code result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login_result)
  return target;
}

int login_result::ByteSize() const {
  int total_size = 0;

  // required .proto.login_result.login_result_code result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_result::MergeFrom(const login_result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_result::CopyFrom(const login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void login_result::Swap(login_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_result::InternalSwap(login_result* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_result_descriptor_;
  metadata.reflection = login_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int username_availability_check::kUserNameFieldNumber;
#endif  // !_MSC_VER

username_availability_check::username_availability_check()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.username_availability_check)
}

void username_availability_check::InitAsDefaultInstance() {
}

username_availability_check::username_availability_check(const username_availability_check& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.username_availability_check)
}

void username_availability_check::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
username_availability_check::username_availability_check(username_availability_check&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

username_availability_check::~username_availability_check() {
  // @@protoc_insertion_point(destructor:proto.username_availability_check)
  SharedDtor();
}

void username_availability_check::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void username_availability_check::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* username_availability_check::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return username_availability_check_descriptor_;
}

const username_availability_check& username_availability_check::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

username_availability_check* username_availability_check::default_instance_ = NULL;

username_availability_check* username_availability_check::New(::google::protobuf::Arena* arena) const {
  username_availability_check* n = new username_availability_check;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void username_availability_check::Clear() {
  if (has_user_name()) {
    user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool username_availability_check::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.username_availability_check)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.username_availability_check.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.username_availability_check)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.username_availability_check)
  return false;
#undef DO_
}

void username_availability_check::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.username_availability_check)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.username_availability_check.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.username_availability_check)
}

::google::protobuf::uint8* username_availability_check::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.username_availability_check)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.username_availability_check.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.username_availability_check)
  return target;
}

int username_availability_check::ByteSize() const {
  int total_size = 0;

  // required string user_name = 1;
  if (has_user_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void username_availability_check::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const username_availability_check* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const username_availability_check*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void username_availability_check::MergeFrom(const username_availability_check& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void username_availability_check::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void username_availability_check::CopyFrom(const username_availability_check& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool username_availability_check::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void username_availability_check::Swap(username_availability_check* other) {
  if (other == this) return;
  InternalSwap(other);
}
void username_availability_check::InternalSwap(username_availability_check* other) {
  user_name_.Swap(&other->user_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata username_availability_check::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = username_availability_check_descriptor_;
  metadata.reflection = username_availability_check_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* username_availability_result_username_availability_result_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return username_availability_result_username_availability_result_code_descriptor_;
}
bool username_availability_result_username_availability_result_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const username_availability_result_username_availability_result_code username_availability_result::NAME_AVAILABLE;
const username_availability_result_username_availability_result_code username_availability_result::NAME_DISALLOW;
const username_availability_result_username_availability_result_code username_availability_result::NAME_TAKEN;
const username_availability_result_username_availability_result_code username_availability_result::username_availability_result_code_MIN;
const username_availability_result_username_availability_result_code username_availability_result::username_availability_result_code_MAX;
const int username_availability_result::username_availability_result_code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int username_availability_result::kResultFieldNumber;
#endif  // !_MSC_VER

username_availability_result::username_availability_result()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.username_availability_result)
}

void username_availability_result::InitAsDefaultInstance() {
}

username_availability_result::username_availability_result(const username_availability_result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.username_availability_result)
}

void username_availability_result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
username_availability_result::username_availability_result(username_availability_result&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

username_availability_result::~username_availability_result() {
  // @@protoc_insertion_point(destructor:proto.username_availability_result)
  SharedDtor();
}

void username_availability_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void username_availability_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* username_availability_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return username_availability_result_descriptor_;
}

const username_availability_result& username_availability_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

username_availability_result* username_availability_result::default_instance_ = NULL;

username_availability_result* username_availability_result::New(::google::protobuf::Arena* arena) const {
  username_availability_result* n = new username_availability_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void username_availability_result::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool username_availability_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.username_availability_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.username_availability_result.username_availability_result_code result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::username_availability_result_username_availability_result_code_IsValid(value)) {
            set_result(static_cast< ::proto::username_availability_result_username_availability_result_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.username_availability_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.username_availability_result)
  return false;
#undef DO_
}

void username_availability_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.username_availability_result)
  // required .proto.username_availability_result.username_availability_result_code result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.username_availability_result)
}

::google::protobuf::uint8* username_availability_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.username_availability_result)
  // required .proto.username_availability_result.username_availability_result_code result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.username_availability_result)
  return target;
}

int username_availability_result::ByteSize() const {
  int total_size = 0;

  // required .proto.username_availability_result.username_availability_result_code result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void username_availability_result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const username_availability_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const username_availability_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void username_availability_result::MergeFrom(const username_availability_result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void username_availability_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void username_availability_result::CopyFrom(const username_availability_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool username_availability_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void username_availability_result::Swap(username_availability_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void username_availability_result::InternalSwap(username_availability_result* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata username_availability_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = username_availability_result_descriptor_;
  metadata.reflection = username_availability_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_register::kUserNameFieldNumber;
const int user_register::kRsaPubkeyFieldNumber;
const int user_register::kCSRFieldNumber;
const int user_register::kMailAddressFieldNumber;
const int user_register::kCellPhoneFieldNumber;
#endif  // !_MSC_VER

user_register::user_register()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.user_register)
}

void user_register::InitAsDefaultInstance() {
}

user_register::user_register(const user_register& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.user_register)
}

void user_register::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsa_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
user_register::user_register(user_register&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

user_register::~user_register() {
  // @@protoc_insertion_point(destructor:proto.user_register)
  SharedDtor();
}

void user_register::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsa_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void user_register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_register_descriptor_;
}

const user_register& user_register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

user_register* user_register::default_instance_ = NULL;

user_register* user_register::New(::google::protobuf::Arena* arena) const {
  user_register* n = new user_register;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_register::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_rsa_pubkey()) {
      rsa_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_csr()) {
      csr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mail_address()) {
      mail_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cell_phone()) {
      cell_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool user_register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.user_register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_register.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rsa_pubkey;
        break;
      }

      // required bytes rsa_pubkey = 2;
      case 2: {
        if (tag == 18) {
         parse_rsa_pubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rsa_pubkey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CSR;
        break;
      }

      // required bytes CSR = 3;
      case 3: {
        if (tag == 26) {
         parse_CSR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_csr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mail_address;
        break;
      }

      // optional string mail_address = 4;
      case 4: {
        if (tag == 34) {
         parse_mail_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mail_address().data(), this->mail_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_register.mail_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cell_phone;
        break;
      }

      // optional string cell_phone = 5;
      case 5: {
        if (tag == 42) {
         parse_cell_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cell_phone().data(), this->cell_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_register.cell_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.user_register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.user_register)
  return false;
#undef DO_
}

void user_register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.user_register)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_register.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // required bytes rsa_pubkey = 2;
  if (has_rsa_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rsa_pubkey(), output);
  }

  // required bytes CSR = 3;
  if (has_csr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->csr(), output);
  }

  // optional string mail_address = 4;
  if (has_mail_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail_address().data(), this->mail_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_register.mail_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mail_address(), output);
  }

  // optional string cell_phone = 5;
  if (has_cell_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_phone().data(), this->cell_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_register.cell_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cell_phone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.user_register)
}

::google::protobuf::uint8* user_register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.user_register)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_register.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required bytes rsa_pubkey = 2;
  if (has_rsa_pubkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rsa_pubkey(), target);
  }

  // required bytes CSR = 3;
  if (has_csr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->csr(), target);
  }

  // optional string mail_address = 4;
  if (has_mail_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail_address().data(), this->mail_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_register.mail_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mail_address(), target);
  }

  // optional string cell_phone = 5;
  if (has_cell_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_phone().data(), this->cell_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_register.cell_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cell_phone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.user_register)
  return target;
}

int user_register::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_user_name()) {
    // required string user_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  if (has_rsa_pubkey()) {
    // required bytes rsa_pubkey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rsa_pubkey());
  }

  if (has_csr()) {
    // required bytes CSR = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->csr());
  }

  return total_size;
}
int user_register::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());

    // required bytes rsa_pubkey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rsa_pubkey());

    // required bytes CSR = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->csr());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24) {
    // optional string mail_address = 4;
    if (has_mail_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_address());
    }

    // optional string cell_phone = 5;
    if (has_cell_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell_phone());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_register::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const user_register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_register::MergeFrom(const user_register& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_rsa_pubkey()) {
      set_has_rsa_pubkey();
      rsa_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsa_pubkey_);
    }
    if (from.has_csr()) {
      set_has_csr();
      csr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.csr_);
    }
    if (from.has_mail_address()) {
      set_has_mail_address();
      mail_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_address_);
    }
    if (from.has_cell_phone()) {
      set_has_cell_phone();
      cell_phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cell_phone_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void user_register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_register::CopyFrom(const user_register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void user_register::Swap(user_register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_register::InternalSwap(user_register* other) {
  user_name_.Swap(&other->user_name_);
  rsa_pubkey_.Swap(&other->rsa_pubkey_);
  csr_.Swap(&other->csr_);
  mail_address_.Swap(&other->mail_address_);
  cell_phone_.Swap(&other->cell_phone_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_register_descriptor_;
  metadata.reflection = user_register_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_register_result_user_register_result_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_register_result_user_register_result_code_descriptor_;
}
bool user_register_result_user_register_result_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_register_result_user_register_result_code user_register_result::REGISTER_SUCCEED;
const user_register_result_user_register_result_code user_register_result::REGISTER_FAILED_CA_BUSY;
const user_register_result_user_register_result_code user_register_result::REGISTER_FAILED_NAME_TAKEN;
const user_register_result_user_register_result_code user_register_result::REGISTER_FAILED_TOO_SHORT_KEY;
const user_register_result_user_register_result_code user_register_result::REGISTER_FAILED_NAME_DISALLOW;
const user_register_result_user_register_result_code user_register_result::REGISTER_FAILED_CA_DOWN;
const user_register_result_user_register_result_code user_register_result::REGISTER_FAILED_CSR_VERIFY_FAILURE;
const user_register_result_user_register_result_code user_register_result::user_register_result_code_MIN;
const user_register_result_user_register_result_code user_register_result::user_register_result_code_MAX;
const int user_register_result::user_register_result_code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int user_register_result::kResultFieldNumber;
const int user_register_result::kCertFieldNumber;
#endif  // !_MSC_VER

user_register_result::user_register_result()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.user_register_result)
}

void user_register_result::InitAsDefaultInstance() {
}

user_register_result::user_register_result(const user_register_result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.user_register_result)
}

void user_register_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  cert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
user_register_result::user_register_result(user_register_result&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

user_register_result::~user_register_result() {
  // @@protoc_insertion_point(destructor:proto.user_register_result)
  SharedDtor();
}

void user_register_result::SharedDtor() {
  cert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void user_register_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_register_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_register_result_descriptor_;
}

const user_register_result& user_register_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

user_register_result* user_register_result::default_instance_ = NULL;

user_register_result* user_register_result::New(::google::protobuf::Arena* arena) const {
  user_register_result* n = new user_register_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_register_result::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_cert()) {
      cert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool user_register_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.user_register_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.user_register_result.user_register_result_code result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::user_register_result_user_register_result_code_IsValid(value)) {
            set_result(static_cast< ::proto::user_register_result_user_register_result_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cert;
        break;
      }

      // optional bytes cert = 2;
      case 2: {
        if (tag == 18) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.user_register_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.user_register_result)
  return false;
#undef DO_
}

void user_register_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.user_register_result)
  // required .proto.user_register_result.user_register_result_code result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bytes cert = 2;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cert(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.user_register_result)
}

::google::protobuf::uint8* user_register_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.user_register_result)
  // required .proto.user_register_result.user_register_result_code result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bytes cert = 2;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cert(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.user_register_result)
  return target;
}

int user_register_result::ByteSize() const {
  int total_size = 0;

  // required .proto.user_register_result.user_register_result_code result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  // optional bytes cert = 2;
  if (has_cert()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cert());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_register_result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const user_register_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_register_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_register_result::MergeFrom(const user_register_result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cert()) {
      set_has_cert();
      cert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void user_register_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_register_result::CopyFrom(const user_register_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_register_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_register_result::Swap(user_register_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_register_result::InternalSwap(user_register_result* other) {
  std::swap(result_, other->result_);
  cert_.Swap(&other->cert_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_register_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_register_result_descriptor_;
  metadata.reflection = user_register_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_cert_lost_request::kUserNameFieldNumber;
const int user_cert_lost_request::kMailAddressFieldNumber;
const int user_cert_lost_request::kCellPhoneFieldNumber;
#endif  // !_MSC_VER

user_cert_lost_request::user_cert_lost_request()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.user_cert_lost_request)
}

void user_cert_lost_request::InitAsDefaultInstance() {
}

user_cert_lost_request::user_cert_lost_request(const user_cert_lost_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.user_cert_lost_request)
}

void user_cert_lost_request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
user_cert_lost_request::user_cert_lost_request(user_cert_lost_request&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

user_cert_lost_request::~user_cert_lost_request() {
  // @@protoc_insertion_point(destructor:proto.user_cert_lost_request)
  SharedDtor();
}

void user_cert_lost_request::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cell_phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void user_cert_lost_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_cert_lost_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_cert_lost_request_descriptor_;
}

const user_cert_lost_request& user_cert_lost_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

user_cert_lost_request* user_cert_lost_request::default_instance_ = NULL;

user_cert_lost_request* user_cert_lost_request::New(::google::protobuf::Arena* arena) const {
  user_cert_lost_request* n = new user_cert_lost_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_cert_lost_request::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mail_address()) {
      mail_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cell_phone()) {
      cell_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool user_cert_lost_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.user_cert_lost_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_cert_lost_request.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mail_address;
        break;
      }

      // optional string mail_address = 3;
      case 3: {
        if (tag == 26) {
         parse_mail_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mail_address().data(), this->mail_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_cert_lost_request.mail_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cell_phone;
        break;
      }

      // optional string cell_phone = 4;
      case 4: {
        if (tag == 34) {
         parse_cell_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cell_phone().data(), this->cell_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_cert_lost_request.cell_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.user_cert_lost_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.user_cert_lost_request)
  return false;
#undef DO_
}

void user_cert_lost_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.user_cert_lost_request)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_request.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // optional string mail_address = 3;
  if (has_mail_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail_address().data(), this->mail_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_request.mail_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mail_address(), output);
  }

  // optional string cell_phone = 4;
  if (has_cell_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_phone().data(), this->cell_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_request.cell_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cell_phone(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.user_cert_lost_request)
}

::google::protobuf::uint8* user_cert_lost_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.user_cert_lost_request)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_request.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional string mail_address = 3;
  if (has_mail_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail_address().data(), this->mail_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_request.mail_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mail_address(), target);
  }

  // optional string cell_phone = 4;
  if (has_cell_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cell_phone().data(), this->cell_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_request.cell_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cell_phone(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.user_cert_lost_request)
  return target;
}

int user_cert_lost_request::ByteSize() const {
  int total_size = 0;

  // required string user_name = 1;
  if (has_user_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }
  if (_has_bits_[1 / 32] & 6) {
    // optional string mail_address = 3;
    if (has_mail_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail_address());
    }

    // optional string cell_phone = 4;
    if (has_cell_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell_phone());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_cert_lost_request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const user_cert_lost_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_cert_lost_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_cert_lost_request::MergeFrom(const user_cert_lost_request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_mail_address()) {
      set_has_mail_address();
      mail_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail_address_);
    }
    if (from.has_cell_phone()) {
      set_has_cell_phone();
      cell_phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cell_phone_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void user_cert_lost_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_cert_lost_request::CopyFrom(const user_cert_lost_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_cert_lost_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_cert_lost_request::Swap(user_cert_lost_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_cert_lost_request::InternalSwap(user_cert_lost_request* other) {
  user_name_.Swap(&other->user_name_);
  mail_address_.Swap(&other->mail_address_);
  cell_phone_.Swap(&other->cell_phone_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_cert_lost_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_cert_lost_request_descriptor_;
  metadata.reflection = user_cert_lost_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_cert_lost_verify::kSecretCodeFieldNumber;
#endif  // !_MSC_VER

user_cert_lost_verify::user_cert_lost_verify()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.user_cert_lost_verify)
}

void user_cert_lost_verify::InitAsDefaultInstance() {
}

user_cert_lost_verify::user_cert_lost_verify(const user_cert_lost_verify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.user_cert_lost_verify)
}

void user_cert_lost_verify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  secret_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
user_cert_lost_verify::user_cert_lost_verify(user_cert_lost_verify&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

user_cert_lost_verify::~user_cert_lost_verify() {
  // @@protoc_insertion_point(destructor:proto.user_cert_lost_verify)
  SharedDtor();
}

void user_cert_lost_verify::SharedDtor() {
  secret_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void user_cert_lost_verify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_cert_lost_verify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_cert_lost_verify_descriptor_;
}

const user_cert_lost_verify& user_cert_lost_verify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

user_cert_lost_verify* user_cert_lost_verify::default_instance_ = NULL;

user_cert_lost_verify* user_cert_lost_verify::New(::google::protobuf::Arena* arena) const {
  user_cert_lost_verify* n = new user_cert_lost_verify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_cert_lost_verify::Clear() {
  if (has_secret_code()) {
    secret_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool user_cert_lost_verify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.user_cert_lost_verify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secret_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret_code().data(), this->secret_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.user_cert_lost_verify.secret_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.user_cert_lost_verify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.user_cert_lost_verify)
  return false;
#undef DO_
}

void user_cert_lost_verify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.user_cert_lost_verify)
  // required string secret_code = 1;
  if (has_secret_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_code().data(), this->secret_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_verify.secret_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->secret_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.user_cert_lost_verify)
}

::google::protobuf::uint8* user_cert_lost_verify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.user_cert_lost_verify)
  // required string secret_code = 1;
  if (has_secret_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret_code().data(), this->secret_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.user_cert_lost_verify.secret_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secret_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.user_cert_lost_verify)
  return target;
}

int user_cert_lost_verify::ByteSize() const {
  int total_size = 0;

  // required string secret_code = 1;
  if (has_secret_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secret_code());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_cert_lost_verify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const user_cert_lost_verify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_cert_lost_verify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_cert_lost_verify::MergeFrom(const user_cert_lost_verify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secret_code()) {
      set_has_secret_code();
      secret_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_code_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void user_cert_lost_verify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_cert_lost_verify::CopyFrom(const user_cert_lost_verify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_cert_lost_verify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void user_cert_lost_verify::Swap(user_cert_lost_verify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_cert_lost_verify::InternalSwap(user_cert_lost_verify* other) {
  secret_code_.Swap(&other->secret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_cert_lost_verify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_cert_lost_verify_descriptor_;
  metadata.reflection = user_cert_lost_verify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buddy::kAddrFieldNumber;
const int buddy::kNickFieldNumber;
const int buddy::kLabelsFieldNumber;
#endif  // !_MSC_VER

buddy::buddy()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.buddy)
}

void buddy::InitAsDefaultInstance() {
  addr_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
}

buddy::buddy(const buddy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.buddy)
}

void buddy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_ = NULL;
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
buddy::buddy(buddy&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

buddy::~buddy() {
  // @@protoc_insertion_point(destructor:proto.buddy)
  SharedDtor();
}

void buddy::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete addr_;
  }
}

void buddy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buddy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buddy_descriptor_;
}

const buddy& buddy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

buddy* buddy::default_instance_ = NULL;

buddy* buddy::New(::google::protobuf::Arena* arena) const {
  buddy* n = new buddy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void buddy::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_addr()) {
      if (addr_ != NULL) addr_->::proto::av_address::Clear();
    }
    if (has_nick()) {
      nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool buddy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.buddy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.av_address addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // optional string nick = 2;
      case 2: {
        if (tag == 18) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.buddy.nick");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // repeated string labels = 3;
      case 3: {
        if (tag == 26) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.buddy.labels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.buddy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.buddy)
  return false;
#undef DO_
}

void buddy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.buddy)
  // required .proto.av_address addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->addr_, output);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.buddy.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick(), output);
  }

  // repeated string labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "proto.buddy.labels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->labels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.buddy)
}

::google::protobuf::uint8* buddy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.buddy)
  // required .proto.av_address addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->addr_, target);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.buddy.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // repeated string labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.buddy.labels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->labels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.buddy)
  return target;
}

int buddy::ByteSize() const {
  int total_size = 0;

  // required .proto.av_address addr = 1;
  if (has_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);
  }
  // optional string nick = 2;
  if (has_nick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // repeated string labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buddy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const buddy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buddy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buddy::MergeFrom(const buddy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      mutable_addr()->::proto::av_address::MergeFrom(from.addr());
    }
    if (from.has_nick()) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void buddy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buddy::CopyFrom(const buddy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buddy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_addr()) {
    if (!this->addr_->IsInitialized()) return false;
  }
  return true;
}

void buddy::Swap(buddy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void buddy::InternalSwap(buddy* other) {
  std::swap(addr_, other->addr_);
  nick_.Swap(&other->nick_);
  labels_.UnsafeArenaSwap(&other->labels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata buddy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buddy_descriptor_;
  metadata.reflection = buddy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buddy_list::kBuddiesFieldNumber;
#endif  // !_MSC_VER

buddy_list::buddy_list()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.buddy_list)
}

void buddy_list::InitAsDefaultInstance() {
}

buddy_list::buddy_list(const buddy_list& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.buddy_list)
}

void buddy_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
buddy_list::buddy_list(buddy_list&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

buddy_list::~buddy_list() {
  // @@protoc_insertion_point(destructor:proto.buddy_list)
  SharedDtor();
}

void buddy_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void buddy_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buddy_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buddy_list_descriptor_;
}

const buddy_list& buddy_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

buddy_list* buddy_list::default_instance_ = NULL;

buddy_list* buddy_list::New(::google::protobuf::Arena* arena) const {
  buddy_list* n = new buddy_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void buddy_list::Clear() {
  buddies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool buddy_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.buddy_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.buddy buddies = 1;
      case 1: {
        if (tag == 10) {
         parse_buddies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buddies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buddies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.buddy_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.buddy_list)
  return false;
#undef DO_
}

void buddy_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.buddy_list)
  // repeated .proto.buddy buddies = 1;
  for (unsigned int i = 0, n = this->buddies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buddies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.buddy_list)
}

::google::protobuf::uint8* buddy_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.buddy_list)
  // repeated .proto.buddy buddies = 1;
  for (unsigned int i = 0, n = this->buddies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buddies(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.buddy_list)
  return target;
}

int buddy_list::ByteSize() const {
  int total_size = 0;

  // repeated .proto.buddy buddies = 1;
  total_size += 1 * this->buddies_size();
  for (int i = 0; i < this->buddies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buddies(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buddy_list::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const buddy_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buddy_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buddy_list::MergeFrom(const buddy_list& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  buddies_.MergeFrom(from.buddies_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void buddy_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buddy_list::CopyFrom(const buddy_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buddy_list::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->buddies())) return false;
  return true;
}

void buddy_list::Swap(buddy_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void buddy_list::InternalSwap(buddy_list* other) {
  buddies_.UnsafeArenaSwap(&other->buddies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata buddy_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buddy_list_descriptor_;
  metadata.reflection = buddy_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

request_buddy_list::request_buddy_list()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.request_buddy_list)
}

void request_buddy_list::InitAsDefaultInstance() {
}

request_buddy_list::request_buddy_list(const request_buddy_list& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.request_buddy_list)
}

void request_buddy_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
request_buddy_list::request_buddy_list(request_buddy_list&& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  Swap(&from);
}
#endif

request_buddy_list::~request_buddy_list() {
  // @@protoc_insertion_point(destructor:proto.request_buddy_list)
  SharedDtor();
}

void request_buddy_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void request_buddy_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request_buddy_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_buddy_list_descriptor_;
}

const request_buddy_list& request_buddy_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
  return *default_instance_;
}

request_buddy_list* request_buddy_list::default_instance_ = NULL;

request_buddy_list* request_buddy_list::New(::google::protobuf::Arena* arena) const {
  request_buddy_list* n = new request_buddy_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void request_buddy_list::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool request_buddy_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.request_buddy_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.request_buddy_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.request_buddy_list)
  return false;
#undef DO_
}

void request_buddy_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.request_buddy_list)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.request_buddy_list)
}

::google::protobuf::uint8* request_buddy_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.request_buddy_list)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.request_buddy_list)
  return target;
}

int request_buddy_list::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request_buddy_list::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const request_buddy_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request_buddy_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request_buddy_list::MergeFrom(const request_buddy_list& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void request_buddy_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request_buddy_list::CopyFrom(const request_buddy_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request_buddy_list::IsInitialized() const {

  return true;
}

void request_buddy_list::Swap(request_buddy_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void request_buddy_list::InternalSwap(request_buddy_list* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata request_buddy_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_buddy_list_descriptor_;
  metadata.reflection = request_buddy_list_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
