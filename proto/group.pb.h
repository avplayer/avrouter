// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef PROTOBUF_group_2eproto__INCLUDED
#define PROTOBUF_group_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "address.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace proto {
namespace group {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_group_2eproto();
void protobuf_AssignDesc_group_2eproto();
void protobuf_ShutdownFile_group_2eproto();

class security_key;
class member_change;
class member_change_buddy_state_notify;
class list_request;
class list_response;

enum member_change_buddy_state {
  member_change_buddy_state_ONLINE = 0,
  member_change_buddy_state_OFFLINE = 1,
  member_change_buddy_state_HIDDING = 2
};
bool member_change_buddy_state_IsValid(int value);
const member_change_buddy_state member_change_buddy_state_buddy_state_MIN = member_change_buddy_state_ONLINE;
const member_change_buddy_state member_change_buddy_state_buddy_state_MAX = member_change_buddy_state_HIDDING;
const int member_change_buddy_state_buddy_state_ARRAYSIZE = member_change_buddy_state_buddy_state_MAX + 1;

const ::google::protobuf::EnumDescriptor* member_change_buddy_state_descriptor();
inline const ::std::string& member_change_buddy_state_Name(member_change_buddy_state value) {
  return ::google::protobuf::internal::NameOfEnum(
    member_change_buddy_state_descriptor(), value);
}
inline bool member_change_buddy_state_Parse(
    const ::std::string& name, member_change_buddy_state* value) {
  return ::google::protobuf::internal::ParseNamedEnum<member_change_buddy_state>(
    member_change_buddy_state_descriptor(), name, value);
}
enum list_response_result_code {
  list_response_result_code_OK = 0,
  list_response_result_code_FAILED_INVALID_GROUP_ID = 1,
  list_response_result_code_FAILED_NO_PRIVILEGE = 100
};
bool list_response_result_code_IsValid(int value);
const list_response_result_code list_response_result_code_result_code_MIN = list_response_result_code_OK;
const list_response_result_code list_response_result_code_result_code_MAX = list_response_result_code_FAILED_NO_PRIVILEGE;
const int list_response_result_code_result_code_ARRAYSIZE = list_response_result_code_result_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* list_response_result_code_descriptor();
inline const ::std::string& list_response_result_code_Name(list_response_result_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    list_response_result_code_descriptor(), value);
}
inline bool list_response_result_code_Parse(
    const ::std::string& name, list_response_result_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<list_response_result_code>(
    list_response_result_code_descriptor(), name, value);
}
// ===================================================================

class security_key : public ::google::protobuf::Message {
 public:
  security_key();
  virtual ~security_key();

  security_key(const security_key& from);

  inline security_key& operator=(const security_key& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline security_key& operator=(security_key&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  security_key(security_key&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const security_key& default_instance();

  void Swap(security_key* other);

  // implements Message ----------------------------------------------

  security_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const security_key& from);
  void MergeFrom(const security_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes prev_key = 2;
  inline bool has_prev_key() const;
  inline void clear_prev_key();
  static const int kPrevKeyFieldNumber = 2;
  inline const ::std::string& prev_key() const;
  inline void set_prev_key(const ::std::string& value);
  inline void set_prev_key(const char* value);
  inline void set_prev_key(const void* value, size_t size);
  inline ::std::string* mutable_prev_key();
  inline ::std::string* release_prev_key();
  inline void set_allocated_prev_key(::std::string* prev_key);

  // required uint64 valid_until = 3;
  inline bool has_valid_until() const;
  inline void clear_valid_until();
  static const int kValidUntilFieldNumber = 3;
  inline ::google::protobuf::uint64 valid_until() const;
  inline void set_valid_until(::google::protobuf::uint64 value);

  // required uint32 key_id = 4;
  inline bool has_key_id() const;
  inline void clear_key_id();
  static const int kKeyIdFieldNumber = 4;
  inline ::google::protobuf::uint32 key_id() const;
  inline void set_key_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.group.security_key)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_prev_key();
  inline void clear_has_prev_key();
  inline void set_has_valid_until();
  inline void clear_has_valid_until();
  inline void set_has_key_id();
  inline void clear_has_key_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* prev_key_;
  ::google::protobuf::uint64 valid_until_;
  ::google::protobuf::uint32 key_id_;
  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static security_key* default_instance_;
};
// -------------------------------------------------------------------

class member_change_buddy_state_notify : public ::google::protobuf::Message {
 public:
  member_change_buddy_state_notify();
  virtual ~member_change_buddy_state_notify();

  member_change_buddy_state_notify(const member_change_buddy_state_notify& from);

  inline member_change_buddy_state_notify& operator=(const member_change_buddy_state_notify& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline member_change_buddy_state_notify& operator=(member_change_buddy_state_notify&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  member_change_buddy_state_notify(member_change_buddy_state_notify&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member_change_buddy_state_notify& default_instance();

  void Swap(member_change_buddy_state_notify* other);

  // implements Message ----------------------------------------------

  member_change_buddy_state_notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const member_change_buddy_state_notify& from);
  void MergeFrom(const member_change_buddy_state_notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto.av_address who = 1;
  inline bool has_who() const;
  inline void clear_who();
  static const int kWhoFieldNumber = 1;
  inline const ::proto::av_address& who() const;
  inline ::proto::av_address* mutable_who();
  inline ::proto::av_address* release_who();
  inline void set_allocated_who(::proto::av_address* who);

  // required .proto.group.member_change.buddy_state state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::proto::group::member_change_buddy_state state() const;
  inline void set_state(::proto::group::member_change_buddy_state value);

  // @@protoc_insertion_point(class_scope:proto.group.member_change.buddy_state_notify)
 private:
  inline void set_has_who();
  inline void clear_has_who();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::av_address* who_;
  int state_;
  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static member_change_buddy_state_notify* default_instance_;
};
// -------------------------------------------------------------------

class member_change : public ::google::protobuf::Message {
 public:
  member_change();
  virtual ~member_change();

  member_change(const member_change& from);

  inline member_change& operator=(const member_change& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline member_change& operator=(member_change&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  member_change(member_change&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const member_change& default_instance();

  void Swap(member_change* other);

  // implements Message ----------------------------------------------

  member_change* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const member_change& from);
  void MergeFrom(const member_change& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef member_change_buddy_state_notify buddy_state_notify;

  typedef member_change_buddy_state buddy_state;
  static const buddy_state ONLINE = member_change_buddy_state_ONLINE;
  static const buddy_state OFFLINE = member_change_buddy_state_OFFLINE;
  static const buddy_state HIDDING = member_change_buddy_state_HIDDING;
  static inline bool buddy_state_IsValid(int value) {
    return member_change_buddy_state_IsValid(value);
  }
  static const buddy_state buddy_state_MIN =
    member_change_buddy_state_buddy_state_MIN;
  static const buddy_state buddy_state_MAX =
    member_change_buddy_state_buddy_state_MAX;
  static const int buddy_state_ARRAYSIZE =
    member_change_buddy_state_buddy_state_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  buddy_state_descriptor() {
    return member_change_buddy_state_descriptor();
  }
  static inline const ::std::string& buddy_state_Name(buddy_state value) {
    return member_change_buddy_state_Name(value);
  }
  static inline bool buddy_state_Parse(const ::std::string& name,
      buddy_state* value) {
    return member_change_buddy_state_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.av_address sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::proto::av_address& sender() const;
  inline ::proto::av_address* mutable_sender();
  inline ::proto::av_address* release_sender();
  inline void set_allocated_sender(::proto::av_address* sender);

  // optional .proto.group.security_key key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::proto::group::security_key& key() const;
  inline ::proto::group::security_key* mutable_key();
  inline ::proto::group::security_key* release_key();
  inline void set_allocated_key(::proto::group::security_key* key);

  // repeated .proto.av_address new_bie = 3;
  inline int new_bie_size() const;
  inline void clear_new_bie();
  static const int kNewBieFieldNumber = 3;
  inline const ::proto::av_address& new_bie(int index) const;
  inline ::proto::av_address* mutable_new_bie(int index);
  inline ::proto::av_address* add_new_bie();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::av_address >&
      new_bie() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::av_address >*
      mutable_new_bie();

  // repeated .proto.av_address gone_bie = 4;
  inline int gone_bie_size() const;
  inline void clear_gone_bie();
  static const int kGoneBieFieldNumber = 4;
  inline const ::proto::av_address& gone_bie(int index) const;
  inline ::proto::av_address* mutable_gone_bie(int index);
  inline ::proto::av_address* add_gone_bie();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::av_address >&
      gone_bie() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::av_address >*
      mutable_gone_bie();

  // repeated .proto.group.member_change.buddy_state_notify buddy_status = 5;
  inline int buddy_status_size() const;
  inline void clear_buddy_status();
  static const int kBuddyStatusFieldNumber = 5;
  inline const ::proto::group::member_change_buddy_state_notify& buddy_status(int index) const;
  inline ::proto::group::member_change_buddy_state_notify* mutable_buddy_status(int index);
  inline ::proto::group::member_change_buddy_state_notify* add_buddy_status();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::group::member_change_buddy_state_notify >&
      buddy_status() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::group::member_change_buddy_state_notify >*
      mutable_buddy_status();

  // @@protoc_insertion_point(class_scope:proto.group.member_change)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::av_address* sender_;
  ::proto::group::security_key* key_;
  ::google::protobuf::RepeatedPtrField< ::proto::av_address > new_bie_;
  ::google::protobuf::RepeatedPtrField< ::proto::av_address > gone_bie_;
  ::google::protobuf::RepeatedPtrField< ::proto::group::member_change_buddy_state_notify > buddy_status_;
  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static member_change* default_instance_;
};
// -------------------------------------------------------------------

class list_request : public ::google::protobuf::Message {
 public:
  list_request();
  virtual ~list_request();

  list_request(const list_request& from);

  inline list_request& operator=(const list_request& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline list_request& operator=(list_request&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  list_request(list_request&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_request& default_instance();

  void Swap(list_request* other);

  // implements Message ----------------------------------------------

  list_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_request& from);
  void MergeFrom(const list_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.group.list_request)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static list_request* default_instance_;
};
// -------------------------------------------------------------------

class list_response : public ::google::protobuf::Message {
 public:
  list_response();
  virtual ~list_response();

  list_response(const list_response& from);

  inline list_response& operator=(const list_response& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline list_response& operator=(list_response&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  list_response(list_response&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_response& default_instance();

  void Swap(list_response* other);

  // implements Message ----------------------------------------------

  list_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_response& from);
  void MergeFrom(const list_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef list_response_result_code result_code;
  static const result_code OK = list_response_result_code_OK;
  static const result_code FAILED_INVALID_GROUP_ID = list_response_result_code_FAILED_INVALID_GROUP_ID;
  static const result_code FAILED_NO_PRIVILEGE = list_response_result_code_FAILED_NO_PRIVILEGE;
  static inline bool result_code_IsValid(int value) {
    return list_response_result_code_IsValid(value);
  }
  static const result_code result_code_MIN =
    list_response_result_code_result_code_MIN;
  static const result_code result_code_MAX =
    list_response_result_code_result_code_MAX;
  static const int result_code_ARRAYSIZE =
    list_response_result_code_result_code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  result_code_descriptor() {
    return list_response_result_code_descriptor();
  }
  static inline const ::std::string& result_code_Name(result_code value) {
    return list_response_result_code_Name(value);
  }
  static inline bool result_code_Parse(const ::std::string& name,
      result_code* value) {
    return list_response_result_code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .proto.group.list_response.result_code result = 1 [default = OK];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::proto::group::list_response_result_code result() const;
  inline void set_result(::proto::group::list_response_result_code value);

  // repeated string list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::std::string& list(int index) const;
  inline ::std::string* mutable_list(int index);
  inline void set_list(int index, const ::std::string& value);
  inline void set_list(int index, const char* value);
  inline void set_list(int index, const char* value, size_t size);
  inline ::std::string* add_list();
  inline void add_list(const ::std::string& value);
  inline void add_list(const char* value);
  inline void add_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // @@protoc_insertion_point(class_scope:proto.group.list_response)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  int result_;
  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static list_response* default_instance_;
};
// ===================================================================


// ===================================================================

// security_key

// required bytes key = 1;
inline bool security_key::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void security_key::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void security_key::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void security_key::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& security_key::key() const {
  // @@protoc_insertion_point(field_get:proto.group.security_key.key)
  return *key_;
}
inline void security_key::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.group.security_key.key)
}
inline void security_key::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.group.security_key.key)
}
inline void security_key::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.group.security_key.key)
}
inline ::std::string* security_key::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.group.security_key.key)
  return key_;
}
inline ::std::string* security_key::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void security_key::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.group.security_key.key)
}

// required bytes prev_key = 2;
inline bool security_key::has_prev_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void security_key::set_has_prev_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void security_key::clear_has_prev_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void security_key::clear_prev_key() {
  if (prev_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prev_key_->clear();
  }
  clear_has_prev_key();
}
inline const ::std::string& security_key::prev_key() const {
  // @@protoc_insertion_point(field_get:proto.group.security_key.prev_key)
  return *prev_key_;
}
inline void security_key::set_prev_key(const ::std::string& value) {
  set_has_prev_key();
  if (prev_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prev_key_ = new ::std::string;
  }
  prev_key_->assign(value);
  // @@protoc_insertion_point(field_set:proto.group.security_key.prev_key)
}
inline void security_key::set_prev_key(const char* value) {
  set_has_prev_key();
  if (prev_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prev_key_ = new ::std::string;
  }
  prev_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.group.security_key.prev_key)
}
inline void security_key::set_prev_key(const void* value, size_t size) {
  set_has_prev_key();
  if (prev_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prev_key_ = new ::std::string;
  }
  prev_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.group.security_key.prev_key)
}
inline ::std::string* security_key::mutable_prev_key() {
  set_has_prev_key();
  if (prev_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prev_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.group.security_key.prev_key)
  return prev_key_;
}
inline ::std::string* security_key::release_prev_key() {
  clear_has_prev_key();
  if (prev_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prev_key_;
    prev_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void security_key::set_allocated_prev_key(::std::string* prev_key) {
  if (prev_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prev_key_;
  }
  if (prev_key) {
    set_has_prev_key();
    prev_key_ = prev_key;
  } else {
    clear_has_prev_key();
    prev_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.group.security_key.prev_key)
}

// required uint64 valid_until = 3;
inline bool security_key::has_valid_until() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void security_key::set_has_valid_until() {
  _has_bits_[0] |= 0x00000004u;
}
inline void security_key::clear_has_valid_until() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void security_key::clear_valid_until() {
  valid_until_ = GOOGLE_ULONGLONG(0);
  clear_has_valid_until();
}
inline ::google::protobuf::uint64 security_key::valid_until() const {
  // @@protoc_insertion_point(field_get:proto.group.security_key.valid_until)
  return valid_until_;
}
inline void security_key::set_valid_until(::google::protobuf::uint64 value) {
  set_has_valid_until();
  valid_until_ = value;
  // @@protoc_insertion_point(field_set:proto.group.security_key.valid_until)
}

// required uint32 key_id = 4;
inline bool security_key::has_key_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void security_key::set_has_key_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void security_key::clear_has_key_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void security_key::clear_key_id() {
  key_id_ = 0u;
  clear_has_key_id();
}
inline ::google::protobuf::uint32 security_key::key_id() const {
  // @@protoc_insertion_point(field_get:proto.group.security_key.key_id)
  return key_id_;
}
inline void security_key::set_key_id(::google::protobuf::uint32 value) {
  set_has_key_id();
  key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.group.security_key.key_id)
}

// -------------------------------------------------------------------

// member_change_buddy_state_notify

// required .proto.av_address who = 1;
inline bool member_change_buddy_state_notify::has_who() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member_change_buddy_state_notify::set_has_who() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member_change_buddy_state_notify::clear_has_who() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member_change_buddy_state_notify::clear_who() {
  if (who_ != NULL) who_->::proto::av_address::Clear();
  clear_has_who();
}
inline const ::proto::av_address& member_change_buddy_state_notify::who() const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.buddy_state_notify.who)
  return who_ != NULL ? *who_ : *default_instance_->who_;
}
inline ::proto::av_address* member_change_buddy_state_notify::mutable_who() {
  set_has_who();
  if (who_ == NULL) who_ = new ::proto::av_address;
  // @@protoc_insertion_point(field_mutable:proto.group.member_change.buddy_state_notify.who)
  return who_;
}
inline ::proto::av_address* member_change_buddy_state_notify::release_who() {
  clear_has_who();
  ::proto::av_address* temp = who_;
  who_ = NULL;
  return temp;
}
inline void member_change_buddy_state_notify::set_allocated_who(::proto::av_address* who) {
  delete who_;
  who_ = who;
  if (who) {
    set_has_who();
  } else {
    clear_has_who();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.group.member_change.buddy_state_notify.who)
}

// required .proto.group.member_change.buddy_state state = 2;
inline bool member_change_buddy_state_notify::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member_change_buddy_state_notify::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member_change_buddy_state_notify::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member_change_buddy_state_notify::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::proto::group::member_change_buddy_state member_change_buddy_state_notify::state() const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.buddy_state_notify.state)
  return static_cast< ::proto::group::member_change_buddy_state >(state_);
}
inline void member_change_buddy_state_notify::set_state(::proto::group::member_change_buddy_state value) {
  assert(::proto::group::member_change_buddy_state_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.group.member_change.buddy_state_notify.state)
}

// -------------------------------------------------------------------

// member_change

// optional .proto.av_address sender = 1;
inline bool member_change::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void member_change::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void member_change::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void member_change::clear_sender() {
  if (sender_ != NULL) sender_->::proto::av_address::Clear();
  clear_has_sender();
}
inline const ::proto::av_address& member_change::sender() const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.sender)
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::proto::av_address* member_change::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::proto::av_address;
  // @@protoc_insertion_point(field_mutable:proto.group.member_change.sender)
  return sender_;
}
inline ::proto::av_address* member_change::release_sender() {
  clear_has_sender();
  ::proto::av_address* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void member_change::set_allocated_sender(::proto::av_address* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.group.member_change.sender)
}

// optional .proto.group.security_key key = 2;
inline bool member_change::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void member_change::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void member_change::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void member_change::clear_key() {
  if (key_ != NULL) key_->::proto::group::security_key::Clear();
  clear_has_key();
}
inline const ::proto::group::security_key& member_change::key() const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::proto::group::security_key* member_change::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::proto::group::security_key;
  // @@protoc_insertion_point(field_mutable:proto.group.member_change.key)
  return key_;
}
inline ::proto::group::security_key* member_change::release_key() {
  clear_has_key();
  ::proto::group::security_key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void member_change::set_allocated_key(::proto::group::security_key* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.group.member_change.key)
}

// repeated .proto.av_address new_bie = 3;
inline int member_change::new_bie_size() const {
  return new_bie_.size();
}
inline void member_change::clear_new_bie() {
  new_bie_.Clear();
}
inline const ::proto::av_address& member_change::new_bie(int index) const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.new_bie)
  return new_bie_.Get(index);
}
inline ::proto::av_address* member_change::mutable_new_bie(int index) {
  // @@protoc_insertion_point(field_mutable:proto.group.member_change.new_bie)
  return new_bie_.Mutable(index);
}
inline ::proto::av_address* member_change::add_new_bie() {
  // @@protoc_insertion_point(field_add:proto.group.member_change.new_bie)
  return new_bie_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::av_address >&
member_change::new_bie() const {
  // @@protoc_insertion_point(field_list:proto.group.member_change.new_bie)
  return new_bie_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::av_address >*
member_change::mutable_new_bie() {
  // @@protoc_insertion_point(field_mutable_list:proto.group.member_change.new_bie)
  return &new_bie_;
}

// repeated .proto.av_address gone_bie = 4;
inline int member_change::gone_bie_size() const {
  return gone_bie_.size();
}
inline void member_change::clear_gone_bie() {
  gone_bie_.Clear();
}
inline const ::proto::av_address& member_change::gone_bie(int index) const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.gone_bie)
  return gone_bie_.Get(index);
}
inline ::proto::av_address* member_change::mutable_gone_bie(int index) {
  // @@protoc_insertion_point(field_mutable:proto.group.member_change.gone_bie)
  return gone_bie_.Mutable(index);
}
inline ::proto::av_address* member_change::add_gone_bie() {
  // @@protoc_insertion_point(field_add:proto.group.member_change.gone_bie)
  return gone_bie_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::av_address >&
member_change::gone_bie() const {
  // @@protoc_insertion_point(field_list:proto.group.member_change.gone_bie)
  return gone_bie_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::av_address >*
member_change::mutable_gone_bie() {
  // @@protoc_insertion_point(field_mutable_list:proto.group.member_change.gone_bie)
  return &gone_bie_;
}

// repeated .proto.group.member_change.buddy_state_notify buddy_status = 5;
inline int member_change::buddy_status_size() const {
  return buddy_status_.size();
}
inline void member_change::clear_buddy_status() {
  buddy_status_.Clear();
}
inline const ::proto::group::member_change_buddy_state_notify& member_change::buddy_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.group.member_change.buddy_status)
  return buddy_status_.Get(index);
}
inline ::proto::group::member_change_buddy_state_notify* member_change::mutable_buddy_status(int index) {
  // @@protoc_insertion_point(field_mutable:proto.group.member_change.buddy_status)
  return buddy_status_.Mutable(index);
}
inline ::proto::group::member_change_buddy_state_notify* member_change::add_buddy_status() {
  // @@protoc_insertion_point(field_add:proto.group.member_change.buddy_status)
  return buddy_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::group::member_change_buddy_state_notify >&
member_change::buddy_status() const {
  // @@protoc_insertion_point(field_list:proto.group.member_change.buddy_status)
  return buddy_status_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::group::member_change_buddy_state_notify >*
member_change::mutable_buddy_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.group.member_change.buddy_status)
  return &buddy_status_;
}

// -------------------------------------------------------------------

// list_request

// required uint32 id = 1;
inline bool list_request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_request::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 list_request::id() const {
  // @@protoc_insertion_point(field_get:proto.group.list_request.id)
  return id_;
}
inline void list_request::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.group.list_request.id)
}

// -------------------------------------------------------------------

// list_response

// required .proto.group.list_response.result_code result = 1 [default = OK];
inline bool list_response::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_response::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_response::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_response::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::group::list_response_result_code list_response::result() const {
  // @@protoc_insertion_point(field_get:proto.group.list_response.result)
  return static_cast< ::proto::group::list_response_result_code >(result_);
}
inline void list_response::set_result(::proto::group::list_response_result_code value) {
  assert(::proto::group::list_response_result_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.group.list_response.result)
}

// repeated string list = 2;
inline int list_response::list_size() const {
  return list_.size();
}
inline void list_response::clear_list() {
  list_.Clear();
}
inline const ::std::string& list_response::list(int index) const {
  // @@protoc_insertion_point(field_get:proto.group.list_response.list)
  return list_.Get(index);
}
inline ::std::string* list_response::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.group.list_response.list)
  return list_.Mutable(index);
}
inline void list_response::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.group.list_response.list)
  list_.Mutable(index)->assign(value);
}
inline void list_response::set_list(int index, const char* value) {
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.group.list_response.list)
}
inline void list_response::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.group.list_response.list)
}
inline ::std::string* list_response::add_list() {
  return list_.Add();
}
inline void list_response::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.group.list_response.list)
}
inline void list_response::add_list(const char* value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.group.list_response.list)
}
inline void list_response::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.group.list_response.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
list_response::list() const {
  // @@protoc_insertion_point(field_list:proto.group.list_response.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
list_response::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.group.list_response.list)
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace group
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::group::member_change_buddy_state> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::group::member_change_buddy_state>() {
  return ::proto::group::member_change_buddy_state_descriptor();
}
template <> struct is_proto_enum< ::proto::group::list_response_result_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::group::list_response_result_code>() {
  return ::proto::group::list_response_result_code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_group_2eproto__INCLUDED
