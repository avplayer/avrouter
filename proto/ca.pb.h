// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca.proto

#ifndef PROTOBUF_ca_2eproto__INCLUDED
#define PROTOBUF_ca_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace ca {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ca_2eproto();
void protobuf_AssignDesc_ca_2eproto();
void protobuf_ShutdownFile_ca_2eproto();

class csr_request;
class csr_result;
class cert_pull;
class cert_pull_result;
class ca_announce;

enum csr_result_csr_code {
  csr_result_csr_code_OK = 0,
  csr_result_csr_code_FAILED_INVALID_CSR = 100,
  csr_result_csr_code_FAILED_DUPLICATED_NAME = 101,
  csr_result_csr_code_FAILED_NO_PRIVILEGE = 102
};
bool csr_result_csr_code_IsValid(int value);
const csr_result_csr_code csr_result_csr_code_csr_code_MIN = csr_result_csr_code_OK;
const csr_result_csr_code csr_result_csr_code_csr_code_MAX = csr_result_csr_code_FAILED_NO_PRIVILEGE;
const int csr_result_csr_code_csr_code_ARRAYSIZE = csr_result_csr_code_csr_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* csr_result_csr_code_descriptor();
inline const ::std::string& csr_result_csr_code_Name(csr_result_csr_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    csr_result_csr_code_descriptor(), value);
}
inline bool csr_result_csr_code_Parse(
    const ::std::string& name, csr_result_csr_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<csr_result_csr_code>(
    csr_result_csr_code_descriptor(), name, value);
}
// ===================================================================

class csr_request : public ::google::protobuf::Message {
 public:
  csr_request();
  virtual ~csr_request();

  csr_request(const csr_request& from);

  inline csr_request& operator=(const csr_request& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline csr_request& operator=(csr_request&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  csr_request(csr_request&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csr_request& default_instance();

  void Swap(csr_request* other);

  // implements Message ----------------------------------------------

  csr_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csr_request& from);
  void MergeFrom(const csr_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes fingerprint = 1;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 1;
  inline const ::std::string& fingerprint() const;
  inline void set_fingerprint(const ::std::string& value);
  inline void set_fingerprint(const char* value);
  inline void set_fingerprint(const void* value, size_t size);
  inline ::std::string* mutable_fingerprint();
  inline ::std::string* release_fingerprint();
  inline void set_allocated_fingerprint(::std::string* fingerprint);

  // required bytes csr = 2;
  inline bool has_csr() const;
  inline void clear_csr();
  static const int kCsrFieldNumber = 2;
  inline const ::std::string& csr() const;
  inline void set_csr(const ::std::string& value);
  inline void set_csr(const char* value);
  inline void set_csr(const void* value, size_t size);
  inline ::std::string* mutable_csr();
  inline ::std::string* release_csr();
  inline void set_allocated_csr(::std::string* csr);

  // @@protoc_insertion_point(class_scope:proto.ca.csr_request)
 private:
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_csr();
  inline void clear_has_csr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fingerprint_;
  ::std::string* csr_;
  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static csr_request* default_instance_;
};
// -------------------------------------------------------------------

class csr_result : public ::google::protobuf::Message {
 public:
  csr_result();
  virtual ~csr_result();

  csr_result(const csr_result& from);

  inline csr_result& operator=(const csr_result& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline csr_result& operator=(csr_result&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  csr_result(csr_result&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csr_result& default_instance();

  void Swap(csr_result* other);

  // implements Message ----------------------------------------------

  csr_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csr_result& from);
  void MergeFrom(const csr_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef csr_result_csr_code csr_code;
  static const csr_code OK = csr_result_csr_code_OK;
  static const csr_code FAILED_INVALID_CSR = csr_result_csr_code_FAILED_INVALID_CSR;
  static const csr_code FAILED_DUPLICATED_NAME = csr_result_csr_code_FAILED_DUPLICATED_NAME;
  static const csr_code FAILED_NO_PRIVILEGE = csr_result_csr_code_FAILED_NO_PRIVILEGE;
  static inline bool csr_code_IsValid(int value) {
    return csr_result_csr_code_IsValid(value);
  }
  static const csr_code csr_code_MIN =
    csr_result_csr_code_csr_code_MIN;
  static const csr_code csr_code_MAX =
    csr_result_csr_code_csr_code_MAX;
  static const int csr_code_ARRAYSIZE =
    csr_result_csr_code_csr_code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  csr_code_descriptor() {
    return csr_result_csr_code_descriptor();
  }
  static inline const ::std::string& csr_code_Name(csr_code value) {
    return csr_result_csr_code_Name(value);
  }
  static inline bool csr_code_Parse(const ::std::string& name,
      csr_code* value) {
    return csr_result_csr_code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .proto.ca.csr_result.csr_code result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::proto::ca::csr_result_csr_code result() const;
  inline void set_result(::proto::ca::csr_result_csr_code value);

  // required bytes fingerprint = 2;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 2;
  inline const ::std::string& fingerprint() const;
  inline void set_fingerprint(const ::std::string& value);
  inline void set_fingerprint(const char* value);
  inline void set_fingerprint(const void* value, size_t size);
  inline ::std::string* mutable_fingerprint();
  inline ::std::string* release_fingerprint();
  inline void set_allocated_fingerprint(::std::string* fingerprint);

  // required bytes cert = 3;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 3;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const void* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // @@protoc_insertion_point(class_scope:proto.ca.csr_result)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();
  inline void set_has_cert();
  inline void clear_has_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fingerprint_;
  ::std::string* cert_;
  int result_;
  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static csr_result* default_instance_;
};
// -------------------------------------------------------------------

class cert_pull : public ::google::protobuf::Message {
 public:
  cert_pull();
  virtual ~cert_pull();

  cert_pull(const cert_pull& from);

  inline cert_pull& operator=(const cert_pull& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline cert_pull& operator=(cert_pull&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  cert_pull(cert_pull&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cert_pull& default_instance();

  void Swap(cert_pull* other);

  // implements Message ----------------------------------------------

  cert_pull* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cert_pull& from);
  void MergeFrom(const cert_pull& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes fingerprint = 1;
  inline bool has_fingerprint() const;
  inline void clear_fingerprint();
  static const int kFingerprintFieldNumber = 1;
  inline const ::std::string& fingerprint() const;
  inline void set_fingerprint(const ::std::string& value);
  inline void set_fingerprint(const char* value);
  inline void set_fingerprint(const void* value, size_t size);
  inline ::std::string* mutable_fingerprint();
  inline ::std::string* release_fingerprint();
  inline void set_allocated_fingerprint(::std::string* fingerprint);

  // @@protoc_insertion_point(class_scope:proto.ca.cert_pull)
 private:
  inline void set_has_fingerprint();
  inline void clear_has_fingerprint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fingerprint_;
  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static cert_pull* default_instance_;
};
// -------------------------------------------------------------------

class cert_pull_result : public ::google::protobuf::Message {
 public:
  cert_pull_result();
  virtual ~cert_pull_result();

  cert_pull_result(const cert_pull_result& from);

  inline cert_pull_result& operator=(const cert_pull_result& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline cert_pull_result& operator=(cert_pull_result&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  cert_pull_result(cert_pull_result&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cert_pull_result& default_instance();

  void Swap(cert_pull_result* other);

  // implements Message ----------------------------------------------

  cert_pull_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cert_pull_result& from);
  void MergeFrom(const cert_pull_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cert = 1;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 1;
  inline const ::std::string& cert() const;
  inline void set_cert(const ::std::string& value);
  inline void set_cert(const char* value);
  inline void set_cert(const void* value, size_t size);
  inline ::std::string* mutable_cert();
  inline ::std::string* release_cert();
  inline void set_allocated_cert(::std::string* cert);

  // @@protoc_insertion_point(class_scope:proto.ca.cert_pull_result)
 private:
  inline void set_has_cert();
  inline void clear_has_cert();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cert_;
  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static cert_pull_result* default_instance_;
};
// -------------------------------------------------------------------

class ca_announce : public ::google::protobuf::Message {
 public:
  ca_announce();
  virtual ~ca_announce();

  ca_announce(const ca_announce& from);

  inline ca_announce& operator=(const ca_announce& from) {
    CopyFrom(from);
    return *this;
  }

  #if __cplusplus >= 201103L || _MSC_VER >= 1600
  inline ca_announce& operator=(ca_announce&& from) {
    if (&from != this) {
      Clear();
      Swap(&from);
    }
    return *this;
  }

  ca_announce(ca_announce&& from);
  #endif

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ca_announce& default_instance();

  void Swap(ca_announce* other);

  // implements Message ----------------------------------------------

  ca_announce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ca_announce& from);
  void MergeFrom(const ca_announce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ca_name = 1;
  inline bool has_ca_name() const;
  inline void clear_ca_name();
  static const int kCaNameFieldNumber = 1;
  inline const ::std::string& ca_name() const;
  inline void set_ca_name(const ::std::string& value);
  inline void set_ca_name(const char* value);
  inline void set_ca_name(const char* value, size_t size);
  inline ::std::string* mutable_ca_name();
  inline ::std::string* release_ca_name();
  inline void set_allocated_ca_name(::std::string* ca_name);

  // optional int32 ca_level = 2;
  inline bool has_ca_level() const;
  inline void clear_ca_level();
  static const int kCaLevelFieldNumber = 2;
  inline ::google::protobuf::int32 ca_level() const;
  inline void set_ca_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.ca.ca_announce)
 private:
  inline void set_has_ca_name();
  inline void clear_has_ca_name();
  inline void set_has_ca_level();
  inline void clear_has_ca_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ca_name_;
  ::google::protobuf::int32 ca_level_;
  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static ca_announce* default_instance_;
};
// ===================================================================


// ===================================================================

// csr_request

// required bytes fingerprint = 1;
inline bool csr_request::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csr_request::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csr_request::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csr_request::clear_fingerprint() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_->clear();
  }
  clear_has_fingerprint();
}
inline const ::std::string& csr_request::fingerprint() const {
  // @@protoc_insertion_point(field_get:proto.ca.csr_request.fingerprint)
  return *fingerprint_;
}
inline void csr_request::set_fingerprint(const ::std::string& value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.csr_request.fingerprint)
}
inline void csr_request::set_fingerprint(const char* value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.csr_request.fingerprint)
}
inline void csr_request::set_fingerprint(const void* value, size_t size) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.csr_request.fingerprint)
}
inline ::std::string* csr_request::mutable_fingerprint() {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.csr_request.fingerprint)
  return fingerprint_;
}
inline ::std::string* csr_request::release_fingerprint() {
  clear_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fingerprint_;
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csr_request::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (fingerprint) {
    set_has_fingerprint();
    fingerprint_ = fingerprint;
  } else {
    clear_has_fingerprint();
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.csr_request.fingerprint)
}

// required bytes csr = 2;
inline bool csr_request::has_csr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csr_request::set_has_csr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csr_request::clear_has_csr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csr_request::clear_csr() {
  if (csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csr_->clear();
  }
  clear_has_csr();
}
inline const ::std::string& csr_request::csr() const {
  // @@protoc_insertion_point(field_get:proto.ca.csr_request.csr)
  return *csr_;
}
inline void csr_request::set_csr(const ::std::string& value) {
  set_has_csr();
  if (csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csr_ = new ::std::string;
  }
  csr_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.csr_request.csr)
}
inline void csr_request::set_csr(const char* value) {
  set_has_csr();
  if (csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csr_ = new ::std::string;
  }
  csr_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.csr_request.csr)
}
inline void csr_request::set_csr(const void* value, size_t size) {
  set_has_csr();
  if (csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csr_ = new ::std::string;
  }
  csr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.csr_request.csr)
}
inline ::std::string* csr_request::mutable_csr() {
  set_has_csr();
  if (csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    csr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.csr_request.csr)
  return csr_;
}
inline ::std::string* csr_request::release_csr() {
  clear_has_csr();
  if (csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = csr_;
    csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csr_request::set_allocated_csr(::std::string* csr) {
  if (csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csr_;
  }
  if (csr) {
    set_has_csr();
    csr_ = csr;
  } else {
    clear_has_csr();
    csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.csr_request.csr)
}

// -------------------------------------------------------------------

// csr_result

// required .proto.ca.csr_result.csr_code result = 1;
inline bool csr_result::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csr_result::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csr_result::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csr_result::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::proto::ca::csr_result_csr_code csr_result::result() const {
  // @@protoc_insertion_point(field_get:proto.ca.csr_result.result)
  return static_cast< ::proto::ca::csr_result_csr_code >(result_);
}
inline void csr_result::set_result(::proto::ca::csr_result_csr_code value) {
  assert(::proto::ca::csr_result_csr_code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.ca.csr_result.result)
}

// required bytes fingerprint = 2;
inline bool csr_result::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csr_result::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csr_result::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csr_result::clear_fingerprint() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_->clear();
  }
  clear_has_fingerprint();
}
inline const ::std::string& csr_result::fingerprint() const {
  // @@protoc_insertion_point(field_get:proto.ca.csr_result.fingerprint)
  return *fingerprint_;
}
inline void csr_result::set_fingerprint(const ::std::string& value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.csr_result.fingerprint)
}
inline void csr_result::set_fingerprint(const char* value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.csr_result.fingerprint)
}
inline void csr_result::set_fingerprint(const void* value, size_t size) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.csr_result.fingerprint)
}
inline ::std::string* csr_result::mutable_fingerprint() {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.csr_result.fingerprint)
  return fingerprint_;
}
inline ::std::string* csr_result::release_fingerprint() {
  clear_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fingerprint_;
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csr_result::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (fingerprint) {
    set_has_fingerprint();
    fingerprint_ = fingerprint;
  } else {
    clear_has_fingerprint();
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.csr_result.fingerprint)
}

// required bytes cert = 3;
inline bool csr_result::has_cert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csr_result::set_has_cert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csr_result::clear_has_cert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csr_result::clear_cert() {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& csr_result::cert() const {
  // @@protoc_insertion_point(field_get:proto.ca.csr_result.cert)
  return *cert_;
}
inline void csr_result::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.csr_result.cert)
}
inline void csr_result::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.csr_result.cert)
}
inline void csr_result::set_cert(const void* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.csr_result.cert)
}
inline ::std::string* csr_result::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.csr_result.cert)
  return cert_;
}
inline ::std::string* csr_result::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csr_result::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.csr_result.cert)
}

// -------------------------------------------------------------------

// cert_pull

// required bytes fingerprint = 1;
inline bool cert_pull::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cert_pull::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cert_pull::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cert_pull::clear_fingerprint() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_->clear();
  }
  clear_has_fingerprint();
}
inline const ::std::string& cert_pull::fingerprint() const {
  // @@protoc_insertion_point(field_get:proto.ca.cert_pull.fingerprint)
  return *fingerprint_;
}
inline void cert_pull::set_fingerprint(const ::std::string& value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.cert_pull.fingerprint)
}
inline void cert_pull::set_fingerprint(const char* value) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.cert_pull.fingerprint)
}
inline void cert_pull::set_fingerprint(const void* value, size_t size) {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  fingerprint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.cert_pull.fingerprint)
}
inline ::std::string* cert_pull::mutable_fingerprint() {
  set_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fingerprint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.cert_pull.fingerprint)
  return fingerprint_;
}
inline ::std::string* cert_pull::release_fingerprint() {
  clear_has_fingerprint();
  if (fingerprint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fingerprint_;
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cert_pull::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (fingerprint) {
    set_has_fingerprint();
    fingerprint_ = fingerprint;
  } else {
    clear_has_fingerprint();
    fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.cert_pull.fingerprint)
}

// -------------------------------------------------------------------

// cert_pull_result

// optional bytes cert = 1;
inline bool cert_pull_result::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cert_pull_result::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cert_pull_result::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cert_pull_result::clear_cert() {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_->clear();
  }
  clear_has_cert();
}
inline const ::std::string& cert_pull_result::cert() const {
  // @@protoc_insertion_point(field_get:proto.ca.cert_pull_result.cert)
  return *cert_;
}
inline void cert_pull_result::set_cert(const ::std::string& value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.cert_pull_result.cert)
}
inline void cert_pull_result::set_cert(const char* value) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.cert_pull_result.cert)
}
inline void cert_pull_result::set_cert(const void* value, size_t size) {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  cert_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.cert_pull_result.cert)
}
inline ::std::string* cert_pull_result::mutable_cert() {
  set_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.cert_pull_result.cert)
  return cert_;
}
inline ::std::string* cert_pull_result::release_cert() {
  clear_has_cert();
  if (cert_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cert_;
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void cert_pull_result::set_allocated_cert(::std::string* cert) {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (cert) {
    set_has_cert();
    cert_ = cert;
  } else {
    clear_has_cert();
    cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.cert_pull_result.cert)
}

// -------------------------------------------------------------------

// ca_announce

// required string ca_name = 1;
inline bool ca_announce::has_ca_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ca_announce::set_has_ca_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ca_announce::clear_has_ca_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ca_announce::clear_ca_name() {
  if (ca_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ca_name_->clear();
  }
  clear_has_ca_name();
}
inline const ::std::string& ca_announce::ca_name() const {
  // @@protoc_insertion_point(field_get:proto.ca.ca_announce.ca_name)
  return *ca_name_;
}
inline void ca_announce::set_ca_name(const ::std::string& value) {
  set_has_ca_name();
  if (ca_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ca_name_ = new ::std::string;
  }
  ca_name_->assign(value);
  // @@protoc_insertion_point(field_set:proto.ca.ca_announce.ca_name)
}
inline void ca_announce::set_ca_name(const char* value) {
  set_has_ca_name();
  if (ca_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ca_name_ = new ::std::string;
  }
  ca_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ca.ca_announce.ca_name)
}
inline void ca_announce::set_ca_name(const char* value, size_t size) {
  set_has_ca_name();
  if (ca_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ca_name_ = new ::std::string;
  }
  ca_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ca.ca_announce.ca_name)
}
inline ::std::string* ca_announce::mutable_ca_name() {
  set_has_ca_name();
  if (ca_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ca_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.ca.ca_announce.ca_name)
  return ca_name_;
}
inline ::std::string* ca_announce::release_ca_name() {
  clear_has_ca_name();
  if (ca_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ca_name_;
    ca_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ca_announce::set_allocated_ca_name(::std::string* ca_name) {
  if (ca_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ca_name_;
  }
  if (ca_name) {
    set_has_ca_name();
    ca_name_ = ca_name;
  } else {
    clear_has_ca_name();
    ca_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ca.ca_announce.ca_name)
}

// optional int32 ca_level = 2;
inline bool ca_announce::has_ca_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ca_announce::set_has_ca_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ca_announce::clear_has_ca_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ca_announce::clear_ca_level() {
  ca_level_ = 0;
  clear_has_ca_level();
}
inline ::google::protobuf::int32 ca_announce::ca_level() const {
  // @@protoc_insertion_point(field_get:proto.ca.ca_announce.ca_level)
  return ca_level_;
}
inline void ca_announce::set_ca_level(::google::protobuf::int32 value) {
  set_has_ca_level();
  ca_level_ = value;
  // @@protoc_insertion_point(field_set:proto.ca.ca_announce.ca_level)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ca
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::ca::csr_result_csr_code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ca::csr_result_csr_code>() {
  return ::proto::ca::csr_result_csr_code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ca_2eproto__INCLUDED
