// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ca.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace ca {

namespace {

const ::google::protobuf::Descriptor* csr_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* csr_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csr_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* csr_result_csr_code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* cert_pull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cert_pull_reflection_ = NULL;
const ::google::protobuf::Descriptor* cert_pull_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cert_pull_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* ca_announce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ca_announce_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ca_2eproto() {
  protobuf_AddDesc_ca_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ca.proto");
  GOOGLE_CHECK(file != NULL);
  csr_request_descriptor_ = file->message_type(0);
  static const int csr_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_request, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_request, csr_),
  };
  csr_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csr_request_descriptor_,
      csr_request::default_instance_,
      csr_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csr_request));
  csr_result_descriptor_ = file->message_type(1);
  static const int csr_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_result, fingerprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_result, cert_),
  };
  csr_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csr_result_descriptor_,
      csr_result::default_instance_,
      csr_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csr_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csr_result));
  csr_result_csr_code_descriptor_ = csr_result_descriptor_->enum_type(0);
  cert_pull_descriptor_ = file->message_type(2);
  static const int cert_pull_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull, fingerprint_),
  };
  cert_pull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cert_pull_descriptor_,
      cert_pull::default_instance_,
      cert_pull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cert_pull));
  cert_pull_result_descriptor_ = file->message_type(3);
  static const int cert_pull_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull_result, cert_),
  };
  cert_pull_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cert_pull_result_descriptor_,
      cert_pull_result::default_instance_,
      cert_pull_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cert_pull_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cert_pull_result));
  ca_announce_descriptor_ = file->message_type(4);
  static const int ca_announce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ca_announce, ca_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ca_announce, ca_level_),
  };
  ca_announce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ca_announce_descriptor_,
      ca_announce::default_instance_,
      ca_announce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ca_announce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ca_announce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ca_announce));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ca_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csr_request_descriptor_, &csr_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csr_result_descriptor_, &csr_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cert_pull_descriptor_, &cert_pull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cert_pull_result_descriptor_, &cert_pull_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ca_announce_descriptor_, &ca_announce::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ca_2eproto() {
  delete csr_request::default_instance_;
  delete csr_request_reflection_;
  delete csr_result::default_instance_;
  delete csr_result_reflection_;
  delete cert_pull::default_instance_;
  delete cert_pull_reflection_;
  delete cert_pull_result::default_instance_;
  delete cert_pull_result_reflection_;
  delete ca_announce::default_instance_;
  delete ca_announce_reflection_;
}

void protobuf_AddDesc_ca_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ca.proto\022\010proto.ca\"/\n\013csr_request\022\023\n\013f"
    "ingerprint\030\001 \002(\014\022\013\n\003csr\030\002 \002(\014\"\277\001\n\ncsr_re"
    "sult\022-\n\006result\030\001 \002(\0162\035.proto.ca.csr_resu"
    "lt.csr_code\022\023\n\013fingerprint\030\002 \002(\014\022\014\n\004cert"
    "\030\003 \002(\014\"_\n\010csr_code\022\006\n\002OK\020\000\022\026\n\022FAILED_INV"
    "ALID_CSR\020d\022\032\n\026FAILED_DUPLICATED_NAME\020e\022\027"
    "\n\023FAILED_NO_PRIVILEGE\020f\" \n\tcert_pull\022\023\n\013"
    "fingerprint\030\001 \002(\014\" \n\020cert_pull_result\022\014\n"
    "\004cert\030\001 \001(\014\"0\n\013ca_announce\022\017\n\007ca_name\030\001 "
    "\002(\t\022\020\n\010ca_level\030\002 \001(\005", 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ca.proto", &protobuf_RegisterTypes);
  csr_request::default_instance_ = new csr_request();
  csr_result::default_instance_ = new csr_result();
  cert_pull::default_instance_ = new cert_pull();
  cert_pull_result::default_instance_ = new cert_pull_result();
  ca_announce::default_instance_ = new ca_announce();
  csr_request::default_instance_->InitAsDefaultInstance();
  csr_result::default_instance_->InitAsDefaultInstance();
  cert_pull::default_instance_->InitAsDefaultInstance();
  cert_pull_result::default_instance_->InitAsDefaultInstance();
  ca_announce::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ca_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ca_2eproto {
  StaticDescriptorInitializer_ca_2eproto() {
    protobuf_AddDesc_ca_2eproto();
  }
} static_descriptor_initializer_ca_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int csr_request::kFingerprintFieldNumber;
const int csr_request::kCsrFieldNumber;
#endif  // !_MSC_VER

csr_request::csr_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.csr_request)
}

void csr_request::InitAsDefaultInstance() {
}

csr_request::csr_request(const csr_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.csr_request)
}

void csr_request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
csr_request::csr_request(csr_request&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

csr_request::~csr_request() {
  // @@protoc_insertion_point(destructor:proto.ca.csr_request)
  SharedDtor();
}

void csr_request::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete csr_;
  }
  if (this != default_instance_) {
  }
}

void csr_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_request_descriptor_;
}

const csr_request& csr_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

csr_request* csr_request::default_instance_ = NULL;

csr_request* csr_request::New() const {
  return new csr_request;
}

void csr_request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fingerprint()) {
      if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fingerprint_->clear();
      }
    }
    if (has_csr()) {
      if (csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        csr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csr_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.csr_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_csr;
        break;
      }

      // required bytes csr = 2;
      case 2: {
        if (tag == 18) {
         parse_csr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_csr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.csr_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.csr_request)
  return false;
#undef DO_
}

void csr_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.csr_request)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  // required bytes csr = 2;
  if (has_csr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->csr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.csr_request)
}

::google::protobuf::uint8* csr_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.csr_request)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint(), target);
  }

  // required bytes csr = 2;
  if (has_csr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->csr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.csr_request)
  return target;
}

int csr_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

    // required bytes csr = 2;
    if (has_csr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->csr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csr_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csr_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csr_request::MergeFrom(const csr_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_csr()) {
      set_csr(from.csr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csr_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_request::CopyFrom(const csr_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void csr_request::Swap(csr_request* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(csr_, other->csr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csr_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_request_descriptor_;
  metadata.reflection = csr_request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* csr_result_csr_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_result_csr_code_descriptor_;
}
bool csr_result_csr_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const csr_result_csr_code csr_result::OK;
const csr_result_csr_code csr_result::FAILED_INVALID_CSR;
const csr_result_csr_code csr_result::FAILED_DUPLICATED_NAME;
const csr_result_csr_code csr_result::FAILED_NO_PRIVILEGE;
const csr_result_csr_code csr_result::csr_code_MIN;
const csr_result_csr_code csr_result::csr_code_MAX;
const int csr_result::csr_code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int csr_result::kResultFieldNumber;
const int csr_result::kFingerprintFieldNumber;
const int csr_result::kCertFieldNumber;
#endif  // !_MSC_VER

csr_result::csr_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.csr_result)
}

void csr_result::InitAsDefaultInstance() {
}

csr_result::csr_result(const csr_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.csr_result)
}

void csr_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
csr_result::csr_result(csr_result&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

csr_result::~csr_result() {
  // @@protoc_insertion_point(destructor:proto.ca.csr_result)
  SharedDtor();
}

void csr_result::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (this != default_instance_) {
  }
}

void csr_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csr_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csr_result_descriptor_;
}

const csr_result& csr_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

csr_result* csr_result::default_instance_ = NULL;

csr_result* csr_result::New() const {
  return new csr_result;
}

void csr_result::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 0;
    if (has_fingerprint()) {
      if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fingerprint_->clear();
      }
    }
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cert_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csr_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.csr_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.ca.csr_result.csr_code result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::ca::csr_result_csr_code_IsValid(value)) {
            set_result(static_cast< ::proto::ca::csr_result_csr_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fingerprint;
        break;
      }

      // required bytes fingerprint = 2;
      case 2: {
        if (tag == 18) {
         parse_fingerprint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cert;
        break;
      }

      // required bytes cert = 3;
      case 3: {
        if (tag == 26) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.csr_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.csr_result)
  return false;
#undef DO_
}

void csr_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.csr_result)
  // required .proto.ca.csr_result.csr_code result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required bytes fingerprint = 2;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->fingerprint(), output);
  }

  // required bytes cert = 3;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.csr_result)
}

::google::protobuf::uint8* csr_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.csr_result)
  // required .proto.ca.csr_result.csr_code result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required bytes fingerprint = 2;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->fingerprint(), target);
  }

  // required bytes cert = 3;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.csr_result)
  return target;
}

int csr_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.ca.csr_result.csr_code result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required bytes fingerprint = 2;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

    // required bytes cert = 3;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csr_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csr_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csr_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csr_result::MergeFrom(const csr_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
    if (from.has_cert()) {
      set_cert(from.cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csr_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csr_result::CopyFrom(const csr_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csr_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void csr_result::Swap(csr_result* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(cert_, other->cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csr_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csr_result_descriptor_;
  metadata.reflection = csr_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cert_pull::kFingerprintFieldNumber;
#endif  // !_MSC_VER

cert_pull::cert_pull()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.cert_pull)
}

void cert_pull::InitAsDefaultInstance() {
}

cert_pull::cert_pull(const cert_pull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.cert_pull)
}

void cert_pull::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fingerprint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
cert_pull::cert_pull(cert_pull&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

cert_pull::~cert_pull() {
  // @@protoc_insertion_point(destructor:proto.ca.cert_pull)
  SharedDtor();
}

void cert_pull::SharedDtor() {
  if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fingerprint_;
  }
  if (this != default_instance_) {
  }
}

void cert_pull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cert_pull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cert_pull_descriptor_;
}

const cert_pull& cert_pull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

cert_pull* cert_pull::default_instance_ = NULL;

cert_pull* cert_pull::New() const {
  return new cert_pull;
}

void cert_pull::Clear() {
  if (has_fingerprint()) {
    if (fingerprint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fingerprint_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cert_pull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.cert_pull)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.cert_pull)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.cert_pull)
  return false;
#undef DO_
}

void cert_pull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.cert_pull)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.cert_pull)
}

::google::protobuf::uint8* cert_pull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.cert_pull)
  // required bytes fingerprint = 1;
  if (has_fingerprint()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.cert_pull)
  return target;
}

int cert_pull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fingerprint = 1;
    if (has_fingerprint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cert_pull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cert_pull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cert_pull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cert_pull::MergeFrom(const cert_pull& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fingerprint()) {
      set_fingerprint(from.fingerprint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cert_pull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_pull::CopyFrom(const cert_pull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_pull::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cert_pull::Swap(cert_pull* other) {
  if (other != this) {
    std::swap(fingerprint_, other->fingerprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cert_pull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cert_pull_descriptor_;
  metadata.reflection = cert_pull_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cert_pull_result::kCertFieldNumber;
#endif  // !_MSC_VER

cert_pull_result::cert_pull_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.cert_pull_result)
}

void cert_pull_result::InitAsDefaultInstance() {
}

cert_pull_result::cert_pull_result(const cert_pull_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.cert_pull_result)
}

void cert_pull_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
cert_pull_result::cert_pull_result(cert_pull_result&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

cert_pull_result::~cert_pull_result() {
  // @@protoc_insertion_point(destructor:proto.ca.cert_pull_result)
  SharedDtor();
}

void cert_pull_result::SharedDtor() {
  if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_;
  }
  if (this != default_instance_) {
  }
}

void cert_pull_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cert_pull_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cert_pull_result_descriptor_;
}

const cert_pull_result& cert_pull_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

cert_pull_result* cert_pull_result::default_instance_ = NULL;

cert_pull_result* cert_pull_result::New() const {
  return new cert_pull_result;
}

void cert_pull_result::Clear() {
  if (has_cert()) {
    if (cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cert_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cert_pull_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.cert_pull_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.cert_pull_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.cert_pull_result)
  return false;
#undef DO_
}

void cert_pull_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.cert_pull_result)
  // optional bytes cert = 1;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.cert_pull_result)
}

::google::protobuf::uint8* cert_pull_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.cert_pull_result)
  // optional bytes cert = 1;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.cert_pull_result)
  return target;
}

int cert_pull_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cert = 1;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cert_pull_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cert_pull_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cert_pull_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cert_pull_result::MergeFrom(const cert_pull_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      set_cert(from.cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cert_pull_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_pull_result::CopyFrom(const cert_pull_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_pull_result::IsInitialized() const {

  return true;
}

void cert_pull_result::Swap(cert_pull_result* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cert_pull_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cert_pull_result_descriptor_;
  metadata.reflection = cert_pull_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ca_announce::kCaNameFieldNumber;
const int ca_announce::kCaLevelFieldNumber;
#endif  // !_MSC_VER

ca_announce::ca_announce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ca.ca_announce)
}

void ca_announce::InitAsDefaultInstance() {
}

ca_announce::ca_announce(const ca_announce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ca.ca_announce)
}

void ca_announce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ca_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ca_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
ca_announce::ca_announce(ca_announce&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

ca_announce::~ca_announce() {
  // @@protoc_insertion_point(destructor:proto.ca.ca_announce)
  SharedDtor();
}

void ca_announce::SharedDtor() {
  if (ca_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ca_name_;
  }
  if (this != default_instance_) {
  }
}

void ca_announce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ca_announce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ca_announce_descriptor_;
}

const ca_announce& ca_announce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ca_2eproto();
  return *default_instance_;
}

ca_announce* ca_announce::default_instance_ = NULL;

ca_announce* ca_announce::New() const {
  return new ca_announce;
}

void ca_announce::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ca_name()) {
      if (ca_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ca_name_->clear();
      }
    }
    ca_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ca_announce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ca.ca_announce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ca_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ca_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ca_name().data(), this->ca_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ca_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ca_level;
        break;
      }

      // optional int32 ca_level = 2;
      case 2: {
        if (tag == 16) {
         parse_ca_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_level_)));
          set_has_ca_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ca.ca_announce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ca.ca_announce)
  return false;
#undef DO_
}

void ca_announce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ca.ca_announce)
  // required string ca_name = 1;
  if (has_ca_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ca_name().data(), this->ca_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ca_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ca_name(), output);
  }

  // optional int32 ca_level = 2;
  if (has_ca_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ca_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ca.ca_announce)
}

::google::protobuf::uint8* ca_announce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ca.ca_announce)
  // required string ca_name = 1;
  if (has_ca_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ca_name().data(), this->ca_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ca_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ca_name(), target);
  }

  // optional int32 ca_level = 2;
  if (has_ca_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ca_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ca.ca_announce)
  return target;
}

int ca_announce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ca_name = 1;
    if (has_ca_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ca_name());
    }

    // optional int32 ca_level = 2;
    if (has_ca_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ca_announce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ca_announce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ca_announce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ca_announce::MergeFrom(const ca_announce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ca_name()) {
      set_ca_name(from.ca_name());
    }
    if (from.has_ca_level()) {
      set_ca_level(from.ca_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ca_announce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ca_announce::CopyFrom(const ca_announce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ca_announce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ca_announce::Swap(ca_announce* other) {
  if (other != this) {
    std::swap(ca_name_, other->ca_name_);
    std::swap(ca_level_, other->ca_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ca_announce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ca_announce_descriptor_;
  metadata.reflection = ca_announce_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ca
}  // namespace proto

// @@protoc_insertion_point(global_scope)
