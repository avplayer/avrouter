// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* text_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  text_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* img_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  img_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* emoji_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emoji_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* symmetry_encryption_key_distribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  symmetry_encryption_key_distribution_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* symmetry_encryption_key_distribution_EncryptionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* avim_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avim_message_reflection_ = NULL;
const ::google::protobuf::Descriptor* message_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  message_packet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_im_2eproto() {
  protobuf_AddDesc_im_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "im.proto");
  GOOGLE_CHECK(file != NULL);
  text_message_descriptor_ = file->message_type(0);
  static const int text_message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_message, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_message, fontname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_message, fontsie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_message, hlink_),
  };
  text_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      text_message_descriptor_,
      text_message::default_instance_,
      text_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(text_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(text_message));
  img_message_descriptor_ = file->message_type(1);
  static const int img_message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img_message, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img_message, image_digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img_message, animated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img_message, hlink_),
  };
  img_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      img_message_descriptor_,
      img_message::default_instance_,
      img_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(img_message));
  emoji_message_descriptor_ = file->message_type(2);
  static const int emoji_message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emoji_message, emoji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emoji_message, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emoji_message, custom_image_),
  };
  emoji_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emoji_message_descriptor_,
      emoji_message::default_instance_,
      emoji_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emoji_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emoji_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emoji_message));
  symmetry_encryption_key_distribution_descriptor_ = file->message_type(3);
  static const int symmetry_encryption_key_distribution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symmetry_encryption_key_distribution, keytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symmetry_encryption_key_distribution, key_),
  };
  symmetry_encryption_key_distribution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      symmetry_encryption_key_distribution_descriptor_,
      symmetry_encryption_key_distribution::default_instance_,
      symmetry_encryption_key_distribution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symmetry_encryption_key_distribution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(symmetry_encryption_key_distribution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(symmetry_encryption_key_distribution));
  symmetry_encryption_key_distribution_EncryptionType_descriptor_ = symmetry_encryption_key_distribution_descriptor_->enum_type(0);
  avim_message_descriptor_ = file->message_type(4);
  static const int avim_message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avim_message, item_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avim_message, item_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avim_message, item_emoji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avim_message, item_key_),
  };
  avim_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avim_message_descriptor_,
      avim_message::default_instance_,
      avim_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avim_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avim_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avim_message));
  message_packet_descriptor_ = file->message_type(5);
  static const int message_packet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packet, avim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packet, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packet, sender_),
  };
  message_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      message_packet_descriptor_,
      message_packet::default_instance_,
      message_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(message_packet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_im_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    text_message_descriptor_, &text_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    img_message_descriptor_, &img_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emoji_message_descriptor_, &emoji_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    symmetry_encryption_key_distribution_descriptor_, &symmetry_encryption_key_distribution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avim_message_descriptor_, &avim_message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    message_packet_descriptor_, &message_packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_im_2eproto() {
  delete text_message::default_instance_;
  delete text_message_reflection_;
  delete img_message::default_instance_;
  delete img_message_reflection_;
  delete emoji_message::default_instance_;
  delete emoji_message_reflection_;
  delete symmetry_encryption_key_distribution::default_instance_;
  delete symmetry_encryption_key_distribution_reflection_;
  delete avim_message::default_instance_;
  delete avim_message_reflection_;
  delete message_packet::default_instance_;
  delete message_packet_reflection_;
}

void protobuf_AddDesc_im_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_AddDesc_address_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010im.proto\022\007message\032\raddress.proto\"N\n\014te"
    "xt_message\022\014\n\004text\030\001 \002(\t\022\020\n\010fontname\030\002 \001"
    "(\t\022\017\n\007fontsie\030\003 \001(\002\022\r\n\005hlink\030\004 \001(\t\"S\n\013im"
    "g_message\022\r\n\005image\030\001 \002(\014\022\024\n\014image_digest"
    "\030\002 \001(\014\022\020\n\010animated\030\003 \001(\010\022\r\n\005hlink\030\004 \001(\t\""
    "C\n\remoji_message\022\r\n\005emoji\030\001 \002(\t\022\r\n\005theme"
    "\030\002 \001(\t\022\024\n\014custom_image\030\003 \001(\014\"\335\001\n$symmetr"
    "y_encryption_key_distribution\022M\n\007keytype"
    "\030\001 \002(\0162<.message.symmetry_encryption_key"
    "_distribution.EncryptionType\022\013\n\003key\030\002 \002("
    "\014\"Y\n\016EncryptionType\022\007\n\003AES\020\000\022\007\n\003DES\020\001\022\014\n"
    "\010BlowFish\020\002\022\013\n\007TwoFish\020\003\022\014\n\010Camellia\020\004\022\014"
    "\n\010DES3_EDE\020\005\"\317\001\n\014avim_message\022(\n\titem_te"
    "xt\030\001 \001(\0132\025.message.text_message\022(\n\nitem_"
    "image\030\002 \001(\0132\024.message.img_message\022*\n\nite"
    "m_emoji\030\003 \001(\0132\026.message.emoji_message\022\?\n"
    "\010item_key\030\024 \001(\0132-.message.symmetry_encry"
    "ption_key_distribution\"h\n\016message_packet"
    "\022#\n\004avim\030\001 \003(\0132\025.message.avim_message\022\016\n"
    "\006serial\030\002 \001(\004\022!\n\006sender\030\003 \001(\0132\021.proto.av"
    "_addressP\000", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "im.proto", &protobuf_RegisterTypes);
  text_message::default_instance_ = new text_message();
  img_message::default_instance_ = new img_message();
  emoji_message::default_instance_ = new emoji_message();
  symmetry_encryption_key_distribution::default_instance_ = new symmetry_encryption_key_distribution();
  avim_message::default_instance_ = new avim_message();
  message_packet::default_instance_ = new message_packet();
  text_message::default_instance_->InitAsDefaultInstance();
  img_message::default_instance_->InitAsDefaultInstance();
  emoji_message::default_instance_->InitAsDefaultInstance();
  symmetry_encryption_key_distribution::default_instance_->InitAsDefaultInstance();
  avim_message::default_instance_->InitAsDefaultInstance();
  message_packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2eproto {
  StaticDescriptorInitializer_im_2eproto() {
    protobuf_AddDesc_im_2eproto();
  }
} static_descriptor_initializer_im_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int text_message::kTextFieldNumber;
const int text_message::kFontnameFieldNumber;
const int text_message::kFontsieFieldNumber;
const int text_message::kHlinkFieldNumber;
#endif  // !_MSC_VER

text_message::text_message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.text_message)
}

void text_message::InitAsDefaultInstance() {
}

text_message::text_message(const text_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.text_message)
}

void text_message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fontsie_ = 0;
  hlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
text_message::text_message(text_message&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

text_message::~text_message() {
  // @@protoc_insertion_point(destructor:message.text_message)
  SharedDtor();
}

void text_message::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (fontname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fontname_;
  }
  if (hlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hlink_;
  }
  if (this != default_instance_) {
  }
}

void text_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* text_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return text_message_descriptor_;
}

const text_message& text_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

text_message* text_message::default_instance_ = NULL;

text_message* text_message::New() const {
  return new text_message;
}

void text_message::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fontname_->clear();
      }
    }
    fontsie_ = 0;
    if (has_hlink()) {
      if (hlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hlink_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool text_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.text_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fontname;
        break;
      }

      // optional string fontname = 2;
      case 2: {
        if (tag == 18) {
         parse_fontname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fontname().data(), this->fontname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fontname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_fontsie;
        break;
      }

      // optional float fontsie = 3;
      case 3: {
        if (tag == 29) {
         parse_fontsie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fontsie_)));
          set_has_fontsie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hlink;
        break;
      }

      // optional string hlink = 4;
      case 4: {
        if (tag == 34) {
         parse_hlink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hlink()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hlink().data(), this->hlink().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hlink");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.text_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.text_message)
  return false;
#undef DO_
}

void text_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.text_message)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string fontname = 2;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fontname().data(), this->fontname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fontname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fontname(), output);
  }

  // optional float fontsie = 3;
  if (has_fontsie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fontsie(), output);
  }

  // optional string hlink = 4;
  if (has_hlink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hlink().data(), this->hlink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hlink");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hlink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.text_message)
}

::google::protobuf::uint8* text_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.text_message)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string fontname = 2;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fontname().data(), this->fontname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fontname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fontname(), target);
  }

  // optional float fontsie = 3;
  if (has_fontsie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fontsie(), target);
  }

  // optional string hlink = 4;
  if (has_hlink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hlink().data(), this->hlink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hlink");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hlink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.text_message)
  return target;
}

int text_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string fontname = 2;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional float fontsie = 3;
    if (has_fontsie()) {
      total_size += 1 + 4;
    }

    // optional string hlink = 4;
    if (has_hlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hlink());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void text_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const text_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const text_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void text_message::MergeFrom(const text_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_fontsie()) {
      set_fontsie(from.fontsie());
    }
    if (from.has_hlink()) {
      set_hlink(from.hlink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void text_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void text_message::CopyFrom(const text_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool text_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void text_message::Swap(text_message* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(fontname_, other->fontname_);
    std::swap(fontsie_, other->fontsie_);
    std::swap(hlink_, other->hlink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata text_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = text_message_descriptor_;
  metadata.reflection = text_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int img_message::kImageFieldNumber;
const int img_message::kImageDigestFieldNumber;
const int img_message::kAnimatedFieldNumber;
const int img_message::kHlinkFieldNumber;
#endif  // !_MSC_VER

img_message::img_message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.img_message)
}

void img_message::InitAsDefaultInstance() {
}

img_message::img_message(const img_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.img_message)
}

void img_message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animated_ = false;
  hlink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
img_message::img_message(img_message&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

img_message::~img_message() {
  // @@protoc_insertion_point(destructor:message.img_message)
  SharedDtor();
}

void img_message::SharedDtor() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (image_digest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_digest_;
  }
  if (hlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hlink_;
  }
  if (this != default_instance_) {
  }
}

void img_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* img_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return img_message_descriptor_;
}

const img_message& img_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

img_message* img_message::default_instance_ = NULL;

img_message* img_message::New() const {
  return new img_message;
}

void img_message::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
    if (has_image_digest()) {
      if (image_digest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_digest_->clear();
      }
    }
    animated_ = false;
    if (has_hlink()) {
      if (hlink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hlink_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool img_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.img_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image_digest;
        break;
      }

      // optional bytes image_digest = 2;
      case 2: {
        if (tag == 18) {
         parse_image_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_digest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animated;
        break;
      }

      // optional bool animated = 3;
      case 3: {
        if (tag == 24) {
         parse_animated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animated_)));
          set_has_animated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hlink;
        break;
      }

      // optional string hlink = 4;
      case 4: {
        if (tag == 34) {
         parse_hlink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hlink()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hlink().data(), this->hlink().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hlink");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.img_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.img_message)
  return false;
#undef DO_
}

void img_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.img_message)
  // required bytes image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // optional bytes image_digest = 2;
  if (has_image_digest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image_digest(), output);
  }

  // optional bool animated = 3;
  if (has_animated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->animated(), output);
  }

  // optional string hlink = 4;
  if (has_hlink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hlink().data(), this->hlink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hlink");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hlink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.img_message)
}

::google::protobuf::uint8* img_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.img_message)
  // required bytes image = 1;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // optional bytes image_digest = 2;
  if (has_image_digest()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image_digest(), target);
  }

  // optional bool animated = 3;
  if (has_animated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->animated(), target);
  }

  // optional string hlink = 4;
  if (has_hlink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hlink().data(), this->hlink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hlink");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hlink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.img_message)
  return target;
}

int img_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

    // optional bytes image_digest = 2;
    if (has_image_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image_digest());
    }

    // optional bool animated = 3;
    if (has_animated()) {
      total_size += 1 + 1;
    }

    // optional string hlink = 4;
    if (has_hlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hlink());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void img_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const img_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const img_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void img_message::MergeFrom(const img_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_image_digest()) {
      set_image_digest(from.image_digest());
    }
    if (from.has_animated()) {
      set_animated(from.animated());
    }
    if (from.has_hlink()) {
      set_hlink(from.hlink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void img_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void img_message::CopyFrom(const img_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool img_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void img_message::Swap(img_message* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(image_digest_, other->image_digest_);
    std::swap(animated_, other->animated_);
    std::swap(hlink_, other->hlink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata img_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = img_message_descriptor_;
  metadata.reflection = img_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emoji_message::kEmojiFieldNumber;
const int emoji_message::kThemeFieldNumber;
const int emoji_message::kCustomImageFieldNumber;
#endif  // !_MSC_VER

emoji_message::emoji_message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.emoji_message)
}

void emoji_message::InitAsDefaultInstance() {
}

emoji_message::emoji_message(const emoji_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.emoji_message)
}

void emoji_message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  emoji_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
emoji_message::emoji_message(emoji_message&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

emoji_message::~emoji_message() {
  // @@protoc_insertion_point(destructor:message.emoji_message)
  SharedDtor();
}

void emoji_message::SharedDtor() {
  if (emoji_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete emoji_;
  }
  if (theme_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete theme_;
  }
  if (custom_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete custom_image_;
  }
  if (this != default_instance_) {
  }
}

void emoji_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emoji_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emoji_message_descriptor_;
}

const emoji_message& emoji_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

emoji_message* emoji_message::default_instance_ = NULL;

emoji_message* emoji_message::New() const {
  return new emoji_message;
}

void emoji_message::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_emoji()) {
      if (emoji_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        emoji_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        theme_->clear();
      }
    }
    if (has_custom_image()) {
      if (custom_image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        custom_image_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emoji_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.emoji_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string emoji = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emoji()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emoji().data(), this->emoji().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "emoji");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // optional string theme = 2;
      case 2: {
        if (tag == 18) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "theme");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_custom_image;
        break;
      }

      // optional bytes custom_image = 3;
      case 3: {
        if (tag == 26) {
         parse_custom_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_custom_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.emoji_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.emoji_message)
  return false;
#undef DO_
}

void emoji_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.emoji_message)
  // required string emoji = 1;
  if (has_emoji()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emoji().data(), this->emoji().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "emoji");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->emoji(), output);
  }

  // optional string theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "theme");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->theme(), output);
  }

  // optional bytes custom_image = 3;
  if (has_custom_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->custom_image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.emoji_message)
}

::google::protobuf::uint8* emoji_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.emoji_message)
  // required string emoji = 1;
  if (has_emoji()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emoji().data(), this->emoji().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "emoji");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->emoji(), target);
  }

  // optional string theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "theme");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->theme(), target);
  }

  // optional bytes custom_image = 3;
  if (has_custom_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->custom_image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.emoji_message)
  return target;
}

int emoji_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string emoji = 1;
    if (has_emoji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emoji());
    }

    // optional string theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // optional bytes custom_image = 3;
    if (has_custom_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->custom_image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emoji_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emoji_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emoji_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emoji_message::MergeFrom(const emoji_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emoji()) {
      set_emoji(from.emoji());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_custom_image()) {
      set_custom_image(from.custom_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emoji_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emoji_message::CopyFrom(const emoji_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emoji_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void emoji_message::Swap(emoji_message* other) {
  if (other != this) {
    std::swap(emoji_, other->emoji_);
    std::swap(theme_, other->theme_);
    std::swap(custom_image_, other->custom_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emoji_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emoji_message_descriptor_;
  metadata.reflection = emoji_message_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* symmetry_encryption_key_distribution_EncryptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return symmetry_encryption_key_distribution_EncryptionType_descriptor_;
}
bool symmetry_encryption_key_distribution_EncryptionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::AES;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::DES;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::BlowFish;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::TwoFish;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::Camellia;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::DES3_EDE;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::EncryptionType_MIN;
const symmetry_encryption_key_distribution_EncryptionType symmetry_encryption_key_distribution::EncryptionType_MAX;
const int symmetry_encryption_key_distribution::EncryptionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int symmetry_encryption_key_distribution::kKeytypeFieldNumber;
const int symmetry_encryption_key_distribution::kKeyFieldNumber;
#endif  // !_MSC_VER

symmetry_encryption_key_distribution::symmetry_encryption_key_distribution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.symmetry_encryption_key_distribution)
}

void symmetry_encryption_key_distribution::InitAsDefaultInstance() {
}

symmetry_encryption_key_distribution::symmetry_encryption_key_distribution(const symmetry_encryption_key_distribution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.symmetry_encryption_key_distribution)
}

void symmetry_encryption_key_distribution::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keytype_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
symmetry_encryption_key_distribution::symmetry_encryption_key_distribution(symmetry_encryption_key_distribution&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

symmetry_encryption_key_distribution::~symmetry_encryption_key_distribution() {
  // @@protoc_insertion_point(destructor:message.symmetry_encryption_key_distribution)
  SharedDtor();
}

void symmetry_encryption_key_distribution::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void symmetry_encryption_key_distribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* symmetry_encryption_key_distribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return symmetry_encryption_key_distribution_descriptor_;
}

const symmetry_encryption_key_distribution& symmetry_encryption_key_distribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

symmetry_encryption_key_distribution* symmetry_encryption_key_distribution::default_instance_ = NULL;

symmetry_encryption_key_distribution* symmetry_encryption_key_distribution::New() const {
  return new symmetry_encryption_key_distribution;
}

void symmetry_encryption_key_distribution::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    keytype_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool symmetry_encryption_key_distribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.symmetry_encryption_key_distribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message.symmetry_encryption_key_distribution.EncryptionType keytype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message::symmetry_encryption_key_distribution_EncryptionType_IsValid(value)) {
            set_keytype(static_cast< ::message::symmetry_encryption_key_distribution_EncryptionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.symmetry_encryption_key_distribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.symmetry_encryption_key_distribution)
  return false;
#undef DO_
}

void symmetry_encryption_key_distribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.symmetry_encryption_key_distribution)
  // required .message.symmetry_encryption_key_distribution.EncryptionType keytype = 1;
  if (has_keytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->keytype(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.symmetry_encryption_key_distribution)
}

::google::protobuf::uint8* symmetry_encryption_key_distribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.symmetry_encryption_key_distribution)
  // required .message.symmetry_encryption_key_distribution.EncryptionType keytype = 1;
  if (has_keytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->keytype(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.symmetry_encryption_key_distribution)
  return target;
}

int symmetry_encryption_key_distribution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .message.symmetry_encryption_key_distribution.EncryptionType keytype = 1;
    if (has_keytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->keytype());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void symmetry_encryption_key_distribution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const symmetry_encryption_key_distribution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const symmetry_encryption_key_distribution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void symmetry_encryption_key_distribution::MergeFrom(const symmetry_encryption_key_distribution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keytype()) {
      set_keytype(from.keytype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void symmetry_encryption_key_distribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void symmetry_encryption_key_distribution::CopyFrom(const symmetry_encryption_key_distribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symmetry_encryption_key_distribution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void symmetry_encryption_key_distribution::Swap(symmetry_encryption_key_distribution* other) {
  if (other != this) {
    std::swap(keytype_, other->keytype_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata symmetry_encryption_key_distribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = symmetry_encryption_key_distribution_descriptor_;
  metadata.reflection = symmetry_encryption_key_distribution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int avim_message::kItemTextFieldNumber;
const int avim_message::kItemImageFieldNumber;
const int avim_message::kItemEmojiFieldNumber;
const int avim_message::kItemKeyFieldNumber;
#endif  // !_MSC_VER

avim_message::avim_message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.avim_message)
}

void avim_message::InitAsDefaultInstance() {
  item_text_ = const_cast< ::message::text_message*>(&::message::text_message::default_instance());
  item_image_ = const_cast< ::message::img_message*>(&::message::img_message::default_instance());
  item_emoji_ = const_cast< ::message::emoji_message*>(&::message::emoji_message::default_instance());
  item_key_ = const_cast< ::message::symmetry_encryption_key_distribution*>(&::message::symmetry_encryption_key_distribution::default_instance());
}

avim_message::avim_message(const avim_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.avim_message)
}

void avim_message::SharedCtor() {
  _cached_size_ = 0;
  item_text_ = NULL;
  item_image_ = NULL;
  item_emoji_ = NULL;
  item_key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
avim_message::avim_message(avim_message&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

avim_message::~avim_message() {
  // @@protoc_insertion_point(destructor:message.avim_message)
  SharedDtor();
}

void avim_message::SharedDtor() {
  if (this != default_instance_) {
    delete item_text_;
    delete item_image_;
    delete item_emoji_;
    delete item_key_;
  }
}

void avim_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avim_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avim_message_descriptor_;
}

const avim_message& avim_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

avim_message* avim_message::default_instance_ = NULL;

avim_message* avim_message::New() const {
  return new avim_message;
}

void avim_message::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_item_text()) {
      if (item_text_ != NULL) item_text_->::message::text_message::Clear();
    }
    if (has_item_image()) {
      if (item_image_ != NULL) item_image_->::message::img_message::Clear();
    }
    if (has_item_emoji()) {
      if (item_emoji_ != NULL) item_emoji_->::message::emoji_message::Clear();
    }
    if (has_item_key()) {
      if (item_key_ != NULL) item_key_->::message::symmetry_encryption_key_distribution::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avim_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.avim_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .message.text_message item_text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_image;
        break;
      }

      // optional .message.img_message item_image = 2;
      case 2: {
        if (tag == 18) {
         parse_item_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_emoji;
        break;
      }

      // optional .message.emoji_message item_emoji = 3;
      case 3: {
        if (tag == 26) {
         parse_item_emoji:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_emoji()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_item_key;
        break;
      }

      // optional .message.symmetry_encryption_key_distribution item_key = 20;
      case 20: {
        if (tag == 162) {
         parse_item_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.avim_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.avim_message)
  return false;
#undef DO_
}

void avim_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.avim_message)
  // optional .message.text_message item_text = 1;
  if (has_item_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_text(), output);
  }

  // optional .message.img_message item_image = 2;
  if (has_item_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_image(), output);
  }

  // optional .message.emoji_message item_emoji = 3;
  if (has_item_emoji()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_emoji(), output);
  }

  // optional .message.symmetry_encryption_key_distribution item_key = 20;
  if (has_item_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->item_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.avim_message)
}

::google::protobuf::uint8* avim_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.avim_message)
  // optional .message.text_message item_text = 1;
  if (has_item_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_text(), target);
  }

  // optional .message.img_message item_image = 2;
  if (has_item_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_image(), target);
  }

  // optional .message.emoji_message item_emoji = 3;
  if (has_item_emoji()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_emoji(), target);
  }

  // optional .message.symmetry_encryption_key_distribution item_key = 20;
  if (has_item_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->item_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.avim_message)
  return target;
}

int avim_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .message.text_message item_text = 1;
    if (has_item_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_text());
    }

    // optional .message.img_message item_image = 2;
    if (has_item_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_image());
    }

    // optional .message.emoji_message item_emoji = 3;
    if (has_item_emoji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_emoji());
    }

    // optional .message.symmetry_encryption_key_distribution item_key = 20;
    if (has_item_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avim_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avim_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avim_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avim_message::MergeFrom(const avim_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_text()) {
      mutable_item_text()->::message::text_message::MergeFrom(from.item_text());
    }
    if (from.has_item_image()) {
      mutable_item_image()->::message::img_message::MergeFrom(from.item_image());
    }
    if (from.has_item_emoji()) {
      mutable_item_emoji()->::message::emoji_message::MergeFrom(from.item_emoji());
    }
    if (from.has_item_key()) {
      mutable_item_key()->::message::symmetry_encryption_key_distribution::MergeFrom(from.item_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avim_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avim_message::CopyFrom(const avim_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avim_message::IsInitialized() const {

  if (has_item_text()) {
    if (!this->item_text().IsInitialized()) return false;
  }
  if (has_item_image()) {
    if (!this->item_image().IsInitialized()) return false;
  }
  if (has_item_emoji()) {
    if (!this->item_emoji().IsInitialized()) return false;
  }
  if (has_item_key()) {
    if (!this->item_key().IsInitialized()) return false;
  }
  return true;
}

void avim_message::Swap(avim_message* other) {
  if (other != this) {
    std::swap(item_text_, other->item_text_);
    std::swap(item_image_, other->item_image_);
    std::swap(item_emoji_, other->item_emoji_);
    std::swap(item_key_, other->item_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avim_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avim_message_descriptor_;
  metadata.reflection = avim_message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int message_packet::kAvimFieldNumber;
const int message_packet::kSerialFieldNumber;
const int message_packet::kSenderFieldNumber;
#endif  // !_MSC_VER

message_packet::message_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.message_packet)
}

void message_packet::InitAsDefaultInstance() {
  sender_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
}

message_packet::message_packet(const message_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.message_packet)
}

void message_packet::SharedCtor() {
  _cached_size_ = 0;
  serial_ = GOOGLE_ULONGLONG(0);
  sender_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
message_packet::message_packet(message_packet&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

message_packet::~message_packet() {
  // @@protoc_insertion_point(destructor:message.message_packet)
  SharedDtor();
}

void message_packet::SharedDtor() {
  if (this != default_instance_) {
    delete sender_;
  }
}

void message_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* message_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_packet_descriptor_;
}

const message_packet& message_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

message_packet* message_packet::default_instance_ = NULL;

message_packet* message_packet::New() const {
  return new message_packet;
}

void message_packet::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    serial_ = GOOGLE_ULONGLONG(0);
    if (has_sender()) {
      if (sender_ != NULL) sender_->::proto::av_address::Clear();
    }
  }
  avim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool message_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.message_packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message.avim_message avim = 1;
      case 1: {
        if (tag == 10) {
         parse_avim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_avim;
        if (input->ExpectTag(16)) goto parse_serial;
        break;
      }

      // optional uint64 serial = 2;
      case 2: {
        if (tag == 16) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional .proto.av_address sender = 3;
      case 3: {
        if (tag == 26) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.message_packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.message_packet)
  return false;
#undef DO_
}

void message_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.message_packet)
  // repeated .message.avim_message avim = 1;
  for (int i = 0; i < this->avim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->avim(i), output);
  }

  // optional uint64 serial = 2;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serial(), output);
  }

  // optional .proto.av_address sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.message_packet)
}

::google::protobuf::uint8* message_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.message_packet)
  // repeated .message.avim_message avim = 1;
  for (int i = 0; i < this->avim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->avim(i), target);
  }

  // optional uint64 serial = 2;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serial(), target);
  }

  // optional .proto.av_address sender = 3;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.message_packet)
  return target;
}

int message_packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 serial = 2;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serial());
    }

    // optional .proto.av_address sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

  }
  // repeated .message.avim_message avim = 1;
  total_size += 1 * this->avim_size();
  for (int i = 0; i < this->avim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avim(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void message_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const message_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const message_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void message_packet::MergeFrom(const message_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  avim_.MergeFrom(from.avim_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_sender()) {
      mutable_sender()->::proto::av_address::MergeFrom(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void message_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_packet::CopyFrom(const message_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_packet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->avim())) return false;
  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void message_packet::Swap(message_packet* other) {
  if (other != this) {
    avim_.Swap(&other->avim_);
    std::swap(serial_, other->serial_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata message_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = message_packet_descriptor_;
  metadata.reflection = message_packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
