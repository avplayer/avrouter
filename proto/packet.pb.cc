// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* avpacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avpacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* avpacket_ack_control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  avpacket_ack_control_reflection_ = NULL;
const ::google::protobuf::Descriptor* agmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* agmp_PKREPLY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agmp_PKREPLY_reflection_ = NULL;
const ::google::protobuf::Descriptor* agmp_NOROUTTOHOST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agmp_NOROUTTOHOST_reflection_ = NULL;
const ::google::protobuf::Descriptor* agmp_TTLOUT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agmp_TTLOUT_reflection_ = NULL;
const ::google::protobuf::Descriptor* bgp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bgp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  avpacket_descriptor_ = file->message_type(0);
  static const int avpacket_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, time_to_live_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, upperlayerpotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, encrype_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, msg_dont_route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, need_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, payload_),
  };
  avpacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avpacket_descriptor_,
      avpacket::default_instance_,
      avpacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avpacket));
  avpacket_ack_control_descriptor_ = avpacket_descriptor_->nested_type(0);
  static const int avpacket_ack_control_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket_ack_control, ack_seq_),
  };
  avpacket_ack_control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      avpacket_ack_control_descriptor_,
      avpacket_ack_control::default_instance_,
      avpacket_ack_control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket_ack_control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(avpacket_ack_control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(avpacket_ack_control));
  agmp_descriptor_ = file->message_type(1);
  static const int agmp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp, pkreply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp, noroutetohost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp, ttlout_),
  };
  agmp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agmp_descriptor_,
      agmp::default_instance_,
      agmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agmp));
  agmp_PKREPLY_descriptor_ = agmp_descriptor_->nested_type(0);
  static const int agmp_PKREPLY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_PKREPLY, x509_cert_),
  };
  agmp_PKREPLY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agmp_PKREPLY_descriptor_,
      agmp_PKREPLY::default_instance_,
      agmp_PKREPLY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_PKREPLY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_PKREPLY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agmp_PKREPLY));
  agmp_NOROUTTOHOST_descriptor_ = agmp_descriptor_->nested_type(1);
  static const int agmp_NOROUTTOHOST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_NOROUTTOHOST, host_),
  };
  agmp_NOROUTTOHOST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agmp_NOROUTTOHOST_descriptor_,
      agmp_NOROUTTOHOST::default_instance_,
      agmp_NOROUTTOHOST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_NOROUTTOHOST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_NOROUTTOHOST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agmp_NOROUTTOHOST));
  agmp_TTLOUT_descriptor_ = agmp_descriptor_->nested_type(2);
  static const int agmp_TTLOUT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_TTLOUT, host_),
  };
  agmp_TTLOUT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agmp_TTLOUT_descriptor_,
      agmp_TTLOUT::default_instance_,
      agmp_TTLOUT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_TTLOUT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agmp_TTLOUT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agmp_TTLOUT));
  bgp_descriptor_ = file->message_type(2);
  static const int bgp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp, time_salt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp, announce_),
  };
  bgp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bgp_descriptor_,
      bgp::default_instance_,
      bgp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bgp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bgp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avpacket_descriptor_, &avpacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    avpacket_ack_control_descriptor_, &avpacket_ack_control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agmp_descriptor_, &agmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agmp_PKREPLY_descriptor_, &agmp_PKREPLY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agmp_NOROUTTOHOST_descriptor_, &agmp_NOROUTTOHOST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agmp_TTLOUT_descriptor_, &agmp_TTLOUT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bgp_descriptor_, &bgp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete avpacket::default_instance_;
  delete avpacket_reflection_;
  delete avpacket::_default_upperlayerpotocol_;
  delete avpacket_ack_control::default_instance_;
  delete avpacket_ack_control_reflection_;
  delete agmp::default_instance_;
  delete agmp_reflection_;
  delete agmp_PKREPLY::default_instance_;
  delete agmp_PKREPLY_reflection_;
  delete agmp_NOROUTTOHOST::default_instance_;
  delete agmp_NOROUTTOHOST_reflection_;
  delete agmp_TTLOUT::default_instance_;
  delete agmp_TTLOUT_reflection_;
  delete bgp::default_instance_;
  delete bgp_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::protobuf_AddDesc_address_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\005proto\032\raddress.proto\"\277\002\n"
    "\010avpacket\022\036\n\003src\030\001 \002(\0132\021.proto.av_addres"
    "s\022\037\n\004dest\030\002 \002(\0132\021.proto.av_address\022\021\n\tpu"
    "blickey\030\003 \001(\014\022\030\n\014time_to_live\030\004 \002(\r:\00264\022"
    "\037\n\021upperlayerpotocol\030\006 \002(\t:\004avim\022\031\n\016encr"
    "ype_method\030\007 \001(\r:\0010\022\026\n\016msg_dont_route\030\t "
    "\001(\010\022\021\n\ttimestamp\030\n \001(\004\022-\n\010need_seq\030\013 \001(\013"
    "2\033.proto.avpacket.ack_control\022\017\n\007payload"
    "\030\010 \001(\014\032\036\n\013ack_control\022\017\n\007ack_seq\030\001 \002(\004\"\373"
    "\001\n\004agmp\022$\n\007pkreply\030\001 \001(\0132\023.proto.agmp.PK"
    "REPLY\022/\n\rnoroutetohost\030\002 \001(\0132\030.proto.agm"
    "p.NOROUTTOHOST\022\"\n\006ttlout\030\003 \001(\0132\022.proto.a"
    "gmp.TTLOUT\032\034\n\007PKREPLY\022\021\n\tx509_cert\030\001 \002(\014"
    "\032/\n\014NOROUTTOHOST\022\037\n\004host\030\001 \002(\0132\021.proto.a"
    "v_address\032)\n\006TTLOUT\022\037\n\004host\030\001 \002(\0132\021.prot"
    "o.av_address\"=\n\003bgp\022\021\n\ttime_salt\030\001 \002(\004\022#"
    "\n\010announce\030\002 \001(\0132\021.proto.av_addressP\000", 677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  avpacket::_default_upperlayerpotocol_ =
      new ::std::string("avim", 4);
  avpacket::default_instance_ = new avpacket();
  avpacket_ack_control::default_instance_ = new avpacket_ack_control();
  agmp::default_instance_ = new agmp();
  agmp_PKREPLY::default_instance_ = new agmp_PKREPLY();
  agmp_NOROUTTOHOST::default_instance_ = new agmp_NOROUTTOHOST();
  agmp_TTLOUT::default_instance_ = new agmp_TTLOUT();
  bgp::default_instance_ = new bgp();
  avpacket::default_instance_->InitAsDefaultInstance();
  avpacket_ack_control::default_instance_->InitAsDefaultInstance();
  agmp::default_instance_->InitAsDefaultInstance();
  agmp_PKREPLY::default_instance_->InitAsDefaultInstance();
  agmp_NOROUTTOHOST::default_instance_->InitAsDefaultInstance();
  agmp_TTLOUT::default_instance_->InitAsDefaultInstance();
  bgp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int avpacket_ack_control::kAckSeqFieldNumber;
#endif  // !_MSC_VER

avpacket_ack_control::avpacket_ack_control()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.avpacket.ack_control)
}

void avpacket_ack_control::InitAsDefaultInstance() {
}

avpacket_ack_control::avpacket_ack_control(const avpacket_ack_control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.avpacket.ack_control)
}

void avpacket_ack_control::SharedCtor() {
  _cached_size_ = 0;
  ack_seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
avpacket_ack_control::avpacket_ack_control(avpacket_ack_control&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

avpacket_ack_control::~avpacket_ack_control() {
  // @@protoc_insertion_point(destructor:proto.avpacket.ack_control)
  SharedDtor();
}

void avpacket_ack_control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void avpacket_ack_control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avpacket_ack_control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avpacket_ack_control_descriptor_;
}

const avpacket_ack_control& avpacket_ack_control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

avpacket_ack_control* avpacket_ack_control::default_instance_ = NULL;

avpacket_ack_control* avpacket_ack_control::New() const {
  return new avpacket_ack_control;
}

void avpacket_ack_control::Clear() {
  ack_seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avpacket_ack_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.avpacket.ack_control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ack_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ack_seq_)));
          set_has_ack_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.avpacket.ack_control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.avpacket.ack_control)
  return false;
#undef DO_
}

void avpacket_ack_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.avpacket.ack_control)
  // required uint64 ack_seq = 1;
  if (has_ack_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ack_seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.avpacket.ack_control)
}

::google::protobuf::uint8* avpacket_ack_control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.avpacket.ack_control)
  // required uint64 ack_seq = 1;
  if (has_ack_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ack_seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.avpacket.ack_control)
  return target;
}

int avpacket_ack_control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ack_seq = 1;
    if (has_ack_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ack_seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avpacket_ack_control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avpacket_ack_control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avpacket_ack_control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avpacket_ack_control::MergeFrom(const avpacket_ack_control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ack_seq()) {
      set_ack_seq(from.ack_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avpacket_ack_control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avpacket_ack_control::CopyFrom(const avpacket_ack_control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avpacket_ack_control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void avpacket_ack_control::Swap(avpacket_ack_control* other) {
  if (other != this) {
    std::swap(ack_seq_, other->ack_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avpacket_ack_control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avpacket_ack_control_descriptor_;
  metadata.reflection = avpacket_ack_control_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* avpacket::_default_upperlayerpotocol_ = NULL;
#ifndef _MSC_VER
const int avpacket::kSrcFieldNumber;
const int avpacket::kDestFieldNumber;
const int avpacket::kPublickeyFieldNumber;
const int avpacket::kTimeToLiveFieldNumber;
const int avpacket::kUpperlayerpotocolFieldNumber;
const int avpacket::kEncrypeMethodFieldNumber;
const int avpacket::kMsgDontRouteFieldNumber;
const int avpacket::kTimestampFieldNumber;
const int avpacket::kNeedSeqFieldNumber;
const int avpacket::kPayloadFieldNumber;
#endif  // !_MSC_VER

avpacket::avpacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.avpacket)
}

void avpacket::InitAsDefaultInstance() {
  src_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
  dest_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
  need_seq_ = const_cast< ::proto::avpacket_ack_control*>(&::proto::avpacket_ack_control::default_instance());
}

avpacket::avpacket(const avpacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.avpacket)
}

void avpacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = NULL;
  dest_ = NULL;
  publickey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_to_live_ = 64u;
  upperlayerpotocol_ = const_cast< ::std::string*>(_default_upperlayerpotocol_);
  encrype_method_ = 0u;
  msg_dont_route_ = false;
  timestamp_ = GOOGLE_ULONGLONG(0);
  need_seq_ = NULL;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
avpacket::avpacket(avpacket&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

avpacket::~avpacket() {
  // @@protoc_insertion_point(destructor:proto.avpacket)
  SharedDtor();
}

void avpacket::SharedDtor() {
  if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete publickey_;
  }
  if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
    delete upperlayerpotocol_;
  }
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
    delete src_;
    delete dest_;
    delete need_seq_;
  }
}

void avpacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avpacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return avpacket_descriptor_;
}

const avpacket& avpacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

avpacket* avpacket::default_instance_ = NULL;

avpacket* avpacket::New() const {
  return new avpacket;
}

void avpacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<avpacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(encrype_method_, timestamp_);
    if (has_src()) {
      if (src_ != NULL) src_->::proto::av_address::Clear();
    }
    if (has_dest()) {
      if (dest_ != NULL) dest_->::proto::av_address::Clear();
    }
    if (has_publickey()) {
      if (publickey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        publickey_->clear();
      }
    }
    time_to_live_ = 64u;
    if (has_upperlayerpotocol()) {
      if (upperlayerpotocol_ != _default_upperlayerpotocol_) {
        upperlayerpotocol_->assign(*_default_upperlayerpotocol_);
      }
    }
    msg_dont_route_ = false;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_need_seq()) {
      if (need_seq_ != NULL) need_seq_->::proto::avpacket_ack_control::Clear();
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool avpacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.avpacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.av_address src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required .proto.av_address dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publickey;
        break;
      }

      // optional bytes publickey = 3;
      case 3: {
        if (tag == 26) {
         parse_publickey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publickey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_to_live;
        break;
      }

      // required uint32 time_to_live = 4 [default = 64];
      case 4: {
        if (tag == 32) {
         parse_time_to_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_to_live_)));
          set_has_time_to_live();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_upperlayerpotocol;
        break;
      }

      // required string upperlayerpotocol = 6 [default = "avim"];
      case 6: {
        if (tag == 50) {
         parse_upperlayerpotocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upperlayerpotocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "upperlayerpotocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_encrype_method;
        break;
      }

      // optional uint32 encrype_method = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_encrype_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encrype_method_)));
          set_has_encrype_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_payload;
        break;
      }

      // optional bytes payload = 8;
      case 8: {
        if (tag == 66) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_msg_dont_route;
        break;
      }

      // optional bool msg_dont_route = 9;
      case 9: {
        if (tag == 72) {
         parse_msg_dont_route:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_dont_route_)));
          set_has_msg_dont_route();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 10;
      case 10: {
        if (tag == 80) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_need_seq;
        break;
      }

      // optional .proto.avpacket.ack_control need_seq = 11;
      case 11: {
        if (tag == 90) {
         parse_need_seq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_need_seq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.avpacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.avpacket)
  return false;
#undef DO_
}

void avpacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.avpacket)
  // required .proto.av_address src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // required .proto.av_address dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest(), output);
  }

  // optional bytes publickey = 3;
  if (has_publickey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->publickey(), output);
  }

  // required uint32 time_to_live = 4 [default = 64];
  if (has_time_to_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_to_live(), output);
  }

  // required string upperlayerpotocol = 6 [default = "avim"];
  if (has_upperlayerpotocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upperlayerpotocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->upperlayerpotocol(), output);
  }

  // optional uint32 encrype_method = 7 [default = 0];
  if (has_encrype_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->encrype_method(), output);
  }

  // optional bytes payload = 8;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->payload(), output);
  }

  // optional bool msg_dont_route = 9;
  if (has_msg_dont_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->msg_dont_route(), output);
  }

  // optional uint64 timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp(), output);
  }

  // optional .proto.avpacket.ack_control need_seq = 11;
  if (has_need_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->need_seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.avpacket)
}

::google::protobuf::uint8* avpacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.avpacket)
  // required .proto.av_address src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // required .proto.av_address dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest(), target);
  }

  // optional bytes publickey = 3;
  if (has_publickey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->publickey(), target);
  }

  // required uint32 time_to_live = 4 [default = 64];
  if (has_time_to_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_to_live(), target);
  }

  // required string upperlayerpotocol = 6 [default = "avim"];
  if (has_upperlayerpotocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upperlayerpotocol().data(), this->upperlayerpotocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upperlayerpotocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->upperlayerpotocol(), target);
  }

  // optional uint32 encrype_method = 7 [default = 0];
  if (has_encrype_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->encrype_method(), target);
  }

  // optional bytes payload = 8;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->payload(), target);
  }

  // optional bool msg_dont_route = 9;
  if (has_msg_dont_route()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->msg_dont_route(), target);
  }

  // optional uint64 timestamp = 10;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp(), target);
  }

  // optional .proto.avpacket.ack_control need_seq = 11;
  if (has_need_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->need_seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.avpacket)
  return target;
}

int avpacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.av_address src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // required .proto.av_address dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest());
    }

    // optional bytes publickey = 3;
    if (has_publickey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->publickey());
    }

    // required uint32 time_to_live = 4 [default = 64];
    if (has_time_to_live()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_to_live());
    }

    // required string upperlayerpotocol = 6 [default = "avim"];
    if (has_upperlayerpotocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upperlayerpotocol());
    }

    // optional uint32 encrype_method = 7 [default = 0];
    if (has_encrype_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encrype_method());
    }

    // optional bool msg_dont_route = 9;
    if (has_msg_dont_route()) {
      total_size += 1 + 1;
    }

    // optional uint64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.avpacket.ack_control need_seq = 11;
    if (has_need_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->need_seq());
    }

    // optional bytes payload = 8;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avpacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const avpacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const avpacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void avpacket::MergeFrom(const avpacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::proto::av_address::MergeFrom(from.src());
    }
    if (from.has_dest()) {
      mutable_dest()->::proto::av_address::MergeFrom(from.dest());
    }
    if (from.has_publickey()) {
      set_publickey(from.publickey());
    }
    if (from.has_time_to_live()) {
      set_time_to_live(from.time_to_live());
    }
    if (from.has_upperlayerpotocol()) {
      set_upperlayerpotocol(from.upperlayerpotocol());
    }
    if (from.has_encrype_method()) {
      set_encrype_method(from.encrype_method());
    }
    if (from.has_msg_dont_route()) {
      set_msg_dont_route(from.msg_dont_route());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_need_seq()) {
      mutable_need_seq()->::proto::avpacket_ack_control::MergeFrom(from.need_seq());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void avpacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avpacket::CopyFrom(const avpacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avpacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_dest()) {
    if (!this->dest().IsInitialized()) return false;
  }
  if (has_need_seq()) {
    if (!this->need_seq().IsInitialized()) return false;
  }
  return true;
}

void avpacket::Swap(avpacket* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dest_, other->dest_);
    std::swap(publickey_, other->publickey_);
    std::swap(time_to_live_, other->time_to_live_);
    std::swap(upperlayerpotocol_, other->upperlayerpotocol_);
    std::swap(encrype_method_, other->encrype_method_);
    std::swap(msg_dont_route_, other->msg_dont_route_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(need_seq_, other->need_seq_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata avpacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = avpacket_descriptor_;
  metadata.reflection = avpacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int agmp_PKREPLY::kX509CertFieldNumber;
#endif  // !_MSC_VER

agmp_PKREPLY::agmp_PKREPLY()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.agmp.PKREPLY)
}

void agmp_PKREPLY::InitAsDefaultInstance() {
}

agmp_PKREPLY::agmp_PKREPLY(const agmp_PKREPLY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.agmp.PKREPLY)
}

void agmp_PKREPLY::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x509_cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
agmp_PKREPLY::agmp_PKREPLY(agmp_PKREPLY&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

agmp_PKREPLY::~agmp_PKREPLY() {
  // @@protoc_insertion_point(destructor:proto.agmp.PKREPLY)
  SharedDtor();
}

void agmp_PKREPLY::SharedDtor() {
  if (x509_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete x509_cert_;
  }
  if (this != default_instance_) {
  }
}

void agmp_PKREPLY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agmp_PKREPLY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agmp_PKREPLY_descriptor_;
}

const agmp_PKREPLY& agmp_PKREPLY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

agmp_PKREPLY* agmp_PKREPLY::default_instance_ = NULL;

agmp_PKREPLY* agmp_PKREPLY::New() const {
  return new agmp_PKREPLY;
}

void agmp_PKREPLY::Clear() {
  if (has_x509_cert()) {
    if (x509_cert_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      x509_cert_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agmp_PKREPLY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.agmp.PKREPLY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes x509_cert = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x509_cert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.agmp.PKREPLY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.agmp.PKREPLY)
  return false;
#undef DO_
}

void agmp_PKREPLY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.agmp.PKREPLY)
  // required bytes x509_cert = 1;
  if (has_x509_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->x509_cert(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.agmp.PKREPLY)
}

::google::protobuf::uint8* agmp_PKREPLY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.agmp.PKREPLY)
  // required bytes x509_cert = 1;
  if (has_x509_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->x509_cert(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.agmp.PKREPLY)
  return target;
}

int agmp_PKREPLY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes x509_cert = 1;
    if (has_x509_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->x509_cert());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agmp_PKREPLY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agmp_PKREPLY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agmp_PKREPLY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agmp_PKREPLY::MergeFrom(const agmp_PKREPLY& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x509_cert()) {
      set_x509_cert(from.x509_cert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agmp_PKREPLY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agmp_PKREPLY::CopyFrom(const agmp_PKREPLY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agmp_PKREPLY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void agmp_PKREPLY::Swap(agmp_PKREPLY* other) {
  if (other != this) {
    std::swap(x509_cert_, other->x509_cert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agmp_PKREPLY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agmp_PKREPLY_descriptor_;
  metadata.reflection = agmp_PKREPLY_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int agmp_NOROUTTOHOST::kHostFieldNumber;
#endif  // !_MSC_VER

agmp_NOROUTTOHOST::agmp_NOROUTTOHOST()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.agmp.NOROUTTOHOST)
}

void agmp_NOROUTTOHOST::InitAsDefaultInstance() {
  host_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
}

agmp_NOROUTTOHOST::agmp_NOROUTTOHOST(const agmp_NOROUTTOHOST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.agmp.NOROUTTOHOST)
}

void agmp_NOROUTTOHOST::SharedCtor() {
  _cached_size_ = 0;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
agmp_NOROUTTOHOST::agmp_NOROUTTOHOST(agmp_NOROUTTOHOST&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

agmp_NOROUTTOHOST::~agmp_NOROUTTOHOST() {
  // @@protoc_insertion_point(destructor:proto.agmp.NOROUTTOHOST)
  SharedDtor();
}

void agmp_NOROUTTOHOST::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void agmp_NOROUTTOHOST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agmp_NOROUTTOHOST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agmp_NOROUTTOHOST_descriptor_;
}

const agmp_NOROUTTOHOST& agmp_NOROUTTOHOST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

agmp_NOROUTTOHOST* agmp_NOROUTTOHOST::default_instance_ = NULL;

agmp_NOROUTTOHOST* agmp_NOROUTTOHOST::New() const {
  return new agmp_NOROUTTOHOST;
}

void agmp_NOROUTTOHOST::Clear() {
  if (has_host()) {
    if (host_ != NULL) host_->::proto::av_address::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agmp_NOROUTTOHOST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.agmp.NOROUTTOHOST)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.av_address host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.agmp.NOROUTTOHOST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.agmp.NOROUTTOHOST)
  return false;
#undef DO_
}

void agmp_NOROUTTOHOST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.agmp.NOROUTTOHOST)
  // required .proto.av_address host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->host(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.agmp.NOROUTTOHOST)
}

::google::protobuf::uint8* agmp_NOROUTTOHOST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.agmp.NOROUTTOHOST)
  // required .proto.av_address host = 1;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->host(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.agmp.NOROUTTOHOST)
  return target;
}

int agmp_NOROUTTOHOST::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.av_address host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agmp_NOROUTTOHOST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agmp_NOROUTTOHOST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agmp_NOROUTTOHOST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agmp_NOROUTTOHOST::MergeFrom(const agmp_NOROUTTOHOST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      mutable_host()->::proto::av_address::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agmp_NOROUTTOHOST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agmp_NOROUTTOHOST::CopyFrom(const agmp_NOROUTTOHOST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agmp_NOROUTTOHOST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void agmp_NOROUTTOHOST::Swap(agmp_NOROUTTOHOST* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agmp_NOROUTTOHOST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agmp_NOROUTTOHOST_descriptor_;
  metadata.reflection = agmp_NOROUTTOHOST_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int agmp_TTLOUT::kHostFieldNumber;
#endif  // !_MSC_VER

agmp_TTLOUT::agmp_TTLOUT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.agmp.TTLOUT)
}

void agmp_TTLOUT::InitAsDefaultInstance() {
  host_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
}

agmp_TTLOUT::agmp_TTLOUT(const agmp_TTLOUT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.agmp.TTLOUT)
}

void agmp_TTLOUT::SharedCtor() {
  _cached_size_ = 0;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
agmp_TTLOUT::agmp_TTLOUT(agmp_TTLOUT&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

agmp_TTLOUT::~agmp_TTLOUT() {
  // @@protoc_insertion_point(destructor:proto.agmp.TTLOUT)
  SharedDtor();
}

void agmp_TTLOUT::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void agmp_TTLOUT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agmp_TTLOUT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agmp_TTLOUT_descriptor_;
}

const agmp_TTLOUT& agmp_TTLOUT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

agmp_TTLOUT* agmp_TTLOUT::default_instance_ = NULL;

agmp_TTLOUT* agmp_TTLOUT::New() const {
  return new agmp_TTLOUT;
}

void agmp_TTLOUT::Clear() {
  if (has_host()) {
    if (host_ != NULL) host_->::proto::av_address::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agmp_TTLOUT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.agmp.TTLOUT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.av_address host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.agmp.TTLOUT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.agmp.TTLOUT)
  return false;
#undef DO_
}

void agmp_TTLOUT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.agmp.TTLOUT)
  // required .proto.av_address host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->host(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.agmp.TTLOUT)
}

::google::protobuf::uint8* agmp_TTLOUT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.agmp.TTLOUT)
  // required .proto.av_address host = 1;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->host(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.agmp.TTLOUT)
  return target;
}

int agmp_TTLOUT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.av_address host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agmp_TTLOUT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agmp_TTLOUT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agmp_TTLOUT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agmp_TTLOUT::MergeFrom(const agmp_TTLOUT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      mutable_host()->::proto::av_address::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agmp_TTLOUT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agmp_TTLOUT::CopyFrom(const agmp_TTLOUT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agmp_TTLOUT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void agmp_TTLOUT::Swap(agmp_TTLOUT* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agmp_TTLOUT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agmp_TTLOUT_descriptor_;
  metadata.reflection = agmp_TTLOUT_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int agmp::kPkreplyFieldNumber;
const int agmp::kNoroutetohostFieldNumber;
const int agmp::kTtloutFieldNumber;
#endif  // !_MSC_VER

agmp::agmp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.agmp)
}

void agmp::InitAsDefaultInstance() {
  pkreply_ = const_cast< ::proto::agmp_PKREPLY*>(&::proto::agmp_PKREPLY::default_instance());
  noroutetohost_ = const_cast< ::proto::agmp_NOROUTTOHOST*>(&::proto::agmp_NOROUTTOHOST::default_instance());
  ttlout_ = const_cast< ::proto::agmp_TTLOUT*>(&::proto::agmp_TTLOUT::default_instance());
}

agmp::agmp(const agmp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.agmp)
}

void agmp::SharedCtor() {
  _cached_size_ = 0;
  pkreply_ = NULL;
  noroutetohost_ = NULL;
  ttlout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
agmp::agmp(agmp&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

agmp::~agmp() {
  // @@protoc_insertion_point(destructor:proto.agmp)
  SharedDtor();
}

void agmp::SharedDtor() {
  if (this != default_instance_) {
    delete pkreply_;
    delete noroutetohost_;
    delete ttlout_;
  }
}

void agmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agmp_descriptor_;
}

const agmp& agmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

agmp* agmp::default_instance_ = NULL;

agmp* agmp::New() const {
  return new agmp;
}

void agmp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pkreply()) {
      if (pkreply_ != NULL) pkreply_->::proto::agmp_PKREPLY::Clear();
    }
    if (has_noroutetohost()) {
      if (noroutetohost_ != NULL) noroutetohost_->::proto::agmp_NOROUTTOHOST::Clear();
    }
    if (has_ttlout()) {
      if (ttlout_ != NULL) ttlout_->::proto::agmp_TTLOUT::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.agmp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.agmp.PKREPLY pkreply = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pkreply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_noroutetohost;
        break;
      }

      // optional .proto.agmp.NOROUTTOHOST noroutetohost = 2;
      case 2: {
        if (tag == 18) {
         parse_noroutetohost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noroutetohost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ttlout;
        break;
      }

      // optional .proto.agmp.TTLOUT ttlout = 3;
      case 3: {
        if (tag == 26) {
         parse_ttlout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ttlout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.agmp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.agmp)
  return false;
#undef DO_
}

void agmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.agmp)
  // optional .proto.agmp.PKREPLY pkreply = 1;
  if (has_pkreply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pkreply(), output);
  }

  // optional .proto.agmp.NOROUTTOHOST noroutetohost = 2;
  if (has_noroutetohost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->noroutetohost(), output);
  }

  // optional .proto.agmp.TTLOUT ttlout = 3;
  if (has_ttlout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ttlout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.agmp)
}

::google::protobuf::uint8* agmp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.agmp)
  // optional .proto.agmp.PKREPLY pkreply = 1;
  if (has_pkreply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pkreply(), target);
  }

  // optional .proto.agmp.NOROUTTOHOST noroutetohost = 2;
  if (has_noroutetohost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->noroutetohost(), target);
  }

  // optional .proto.agmp.TTLOUT ttlout = 3;
  if (has_ttlout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ttlout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.agmp)
  return target;
}

int agmp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.agmp.PKREPLY pkreply = 1;
    if (has_pkreply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pkreply());
    }

    // optional .proto.agmp.NOROUTTOHOST noroutetohost = 2;
    if (has_noroutetohost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->noroutetohost());
    }

    // optional .proto.agmp.TTLOUT ttlout = 3;
    if (has_ttlout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ttlout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agmp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agmp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agmp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agmp::MergeFrom(const agmp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkreply()) {
      mutable_pkreply()->::proto::agmp_PKREPLY::MergeFrom(from.pkreply());
    }
    if (from.has_noroutetohost()) {
      mutable_noroutetohost()->::proto::agmp_NOROUTTOHOST::MergeFrom(from.noroutetohost());
    }
    if (from.has_ttlout()) {
      mutable_ttlout()->::proto::agmp_TTLOUT::MergeFrom(from.ttlout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agmp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agmp::CopyFrom(const agmp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agmp::IsInitialized() const {

  if (has_pkreply()) {
    if (!this->pkreply().IsInitialized()) return false;
  }
  if (has_noroutetohost()) {
    if (!this->noroutetohost().IsInitialized()) return false;
  }
  if (has_ttlout()) {
    if (!this->ttlout().IsInitialized()) return false;
  }
  return true;
}

void agmp::Swap(agmp* other) {
  if (other != this) {
    std::swap(pkreply_, other->pkreply_);
    std::swap(noroutetohost_, other->noroutetohost_);
    std::swap(ttlout_, other->ttlout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agmp_descriptor_;
  metadata.reflection = agmp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bgp::kTimeSaltFieldNumber;
const int bgp::kAnnounceFieldNumber;
#endif  // !_MSC_VER

bgp::bgp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.bgp)
}

void bgp::InitAsDefaultInstance() {
  announce_ = const_cast< ::proto::av_address*>(&::proto::av_address::default_instance());
}

bgp::bgp(const bgp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.bgp)
}

void bgp::SharedCtor() {
  _cached_size_ = 0;
  time_salt_ = GOOGLE_ULONGLONG(0);
  announce_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

#if __cplusplus >= 201103L || _MSC_VER >= 1600
bgp::bgp(bgp&& from)
  : ::google::protobuf::Message() {
  Swap(&from);
}
#endif

bgp::~bgp() {
  // @@protoc_insertion_point(destructor:proto.bgp)
  SharedDtor();
}

void bgp::SharedDtor() {
  if (this != default_instance_) {
    delete announce_;
  }
}

void bgp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bgp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bgp_descriptor_;
}

const bgp& bgp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

bgp* bgp::default_instance_ = NULL;

bgp* bgp::New() const {
  return new bgp;
}

void bgp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    time_salt_ = GOOGLE_ULONGLONG(0);
    if (has_announce()) {
      if (announce_ != NULL) announce_->::proto::av_address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bgp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.bgp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time_salt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_salt_)));
          set_has_time_salt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_announce;
        break;
      }

      // optional .proto.av_address announce = 2;
      case 2: {
        if (tag == 18) {
         parse_announce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.bgp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.bgp)
  return false;
#undef DO_
}

void bgp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.bgp)
  // required uint64 time_salt = 1;
  if (has_time_salt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time_salt(), output);
  }

  // optional .proto.av_address announce = 2;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->announce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.bgp)
}

::google::protobuf::uint8* bgp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.bgp)
  // required uint64 time_salt = 1;
  if (has_time_salt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time_salt(), target);
  }

  // optional .proto.av_address announce = 2;
  if (has_announce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->announce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.bgp)
  return target;
}

int bgp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 time_salt = 1;
    if (has_time_salt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_salt());
    }

    // optional .proto.av_address announce = 2;
    if (has_announce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->announce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bgp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bgp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bgp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bgp::MergeFrom(const bgp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_salt()) {
      set_time_salt(from.time_salt());
    }
    if (from.has_announce()) {
      mutable_announce()->::proto::av_address::MergeFrom(from.announce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bgp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bgp::CopyFrom(const bgp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bgp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_announce()) {
    if (!this->announce().IsInitialized()) return false;
  }
  return true;
}

void bgp::Swap(bgp* other) {
  if (other != this) {
    std::swap(time_salt_, other->time_salt_);
    std::swap(announce_, other->announce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bgp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bgp_descriptor_;
  metadata.reflection = bgp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
